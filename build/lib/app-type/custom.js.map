{
  "version": 3,
  "sources": ["../../../src/lib/app-type/custom.ts"],
  "sourcesContent": ["import { AwtrixLight } from '../../main';\nimport { CustomApp } from '../adapter-config';\nimport { AwtrixApi } from '../api';\nimport { AppType as AbstractAppType } from './abstract';\n\nexport namespace AppType {\n    type ObjCache = {\n        val: string | ioBroker.StateValue | undefined;\n        unit: any;\n        type: string;\n        ts: number;\n    }\n\n    export class Custom extends AbstractAppType.AbstractApp {\n        private appDefinition: CustomApp;\n        private objCache: ObjCache | undefined;\n\n        public constructor(apiClient: AwtrixApi.Client, adapter: AwtrixLight, definition: CustomApp) {\n            super(apiClient, adapter, definition);\n\n            this.appDefinition = definition;\n            this.objCache = undefined;\n        }\n\n        public override async init(): Promise<void> {\n            const text = String(this.appDefinition.text).trim();\n            const appVisibleState = await this.adapter.getStateAsync(`apps.${this.appDefinition.name}.visible`);\n            const appVisible = appVisibleState ? appVisibleState.val : true;\n\n            // Ack if changed while instance was stopped\n            if (appVisibleState && !appVisibleState?.ack) {\n                await this.adapter.setStateAsync(`apps.${this.appDefinition.name}.visible`, { val: appVisible, ack: true, c: 'initCustomApp' });\n            }\n\n            if (!appVisible) {\n                this.adapter.log.debug(`[initCustomApp] Going to remove app \"${this.appDefinition.name}\" (was hidden by state: apps.${this.appDefinition.name}.visible)`);\n\n                await this.apiClient.removeAppAsync(this.appDefinition.name).catch((error) => {\n                    this.adapter.log.warn(`[initCustomApp] Unable to remove app \"${this.appDefinition.name}\" (hidden by state): ${error}`);\n                });\n            } else if (this.appDefinition.objId && text.includes('%s')) {\n                try {\n                    const objId = this.appDefinition.objId;\n                    const obj = await this.adapter.getForeignObjectAsync(objId);\n                    if (obj && obj.type === 'state') {\n                        const state = await this.adapter.getForeignStateAsync(objId);\n\n                        this.objCache = {\n                            val: state && state.ack ? state.val : undefined,\n                            type: obj?.common.type,\n                            unit: obj?.common?.unit,\n                            ts: state ? state.ts : Date.now(),\n                        };\n\n                        const supportedTypes = ['string', 'number', 'mixed'];\n                        if (obj?.common.type && !supportedTypes.includes(obj.common.type)) {\n                            this.adapter.log.warn(\n                                `[initCustomApp] Object of app \"${this.appDefinition.name}\" with objId \"${objId}\" has invalid type: ${obj.common.type} instead of ${supportedTypes.join(', ')}`,\n                            );\n                        }\n\n                        if (text.includes('%u') && !obj?.common?.unit) {\n                            this.adapter.log.warn(\n                                `[initCustomApp] Object of app \"${this.appDefinition.name}\" (${objId}) has no unit - remove \"%u\" from text or define unit in object (common.unit)`,\n                            );\n                        }\n\n                        if (state && !state.ack) {\n                            this.adapter.log.info(`[initCustomApp] State value of app \"${this.appDefinition.name}\" (${objId}) is not acknowledged (ack: false) - waiting for new value`);\n                        }\n\n                        await this.adapter.subscribeForeignStatesAsync(objId);\n                        await this.adapter.subscribeForeignObjectsAsync(objId);\n\n                        this.adapter.log.debug(`[initCustomApp] Found app \"${this.appDefinition.name}\" with objId \"${objId}\" - subscribed to changes`);\n\n                        await this.refresh();\n                    } else {\n                        this.adapter.log.warn(`[initCustomApp] App \"${this.appDefinition.name}\" was configured with invalid objId \"${objId}\": Invalid type ${obj?.type}`);\n                    }\n                } catch (error) {\n                    this.adapter.log.error(`[initCustomApp] Unable to get object information for app \"${this.appDefinition.name}\": ${error}`);\n                }\n            } else if (text.length > 0) {\n                // App with static text (no %s specified)\n                this.adapter.log.debug(`[initCustomApp] Creating app \"${this.appDefinition.name}\" with icon \"${this.appDefinition.icon}\" and static text \"${this.appDefinition.text}\"`);\n\n                if (this.appDefinition.objId) {\n                    this.adapter.log.warn(\n                        `[initCustomApp] App \"${this.appDefinition.name}\" was defined with objId \"${this.appDefinition.objId}\" but \"%s\" is not used in the text - state changes will be ignored`,\n                    );\n                }\n\n                const displayText = text.replace('%u', '').trim();\n\n                if (displayText.length > 0) {\n                    await this.apiClient.appRequestAsync(this.appDefinition.name, this.createAppRequestObj(displayText)).catch((error) => {\n                        this.adapter.log.warn(`(custom?name=${this.appDefinition.name}) Unable to create app \"${this.appDefinition.name}\" with static text: ${error}`);\n                    });\n                } else {\n                    // Empty text => remove app\n                    this.adapter.log.debug(`[initCustomApp] Going to remove app \"${this.appDefinition.name}\" with static text (empty text)`);\n\n                    await this.apiClient.removeAppAsync(this.appDefinition.name).catch((error) => {\n                        this.adapter.log.warn(`[initCustomApp] Unable to remove app \"${this.appDefinition.name}\" with static text (empty text): ${error}`);\n                    });\n                }\n            }\n\n            super.init();\n        }\n\n        private createAppRequestObj(text: string, val?: ioBroker.StateValue): AwtrixApi.App {\n            const moreOptions: AwtrixApi.App = {};\n\n            // Background\n            if (this.appDefinition.useBackgroundEffect) {\n                moreOptions.effect = this.appDefinition.backgroundEffect;\n            } else if (this.appDefinition.backgroundColor) {\n                moreOptions.background = this.appDefinition.backgroundColor;\n            }\n\n            // Set rainbow colors OR text color\n            if (this.appDefinition.rainbow) {\n                moreOptions.rainbow = true;\n            } else if (this.appDefinition.textColor) {\n                moreOptions.color = this.appDefinition.textColor;\n            }\n\n            // Set noScroll OR scroll speed\n            if (this.appDefinition.noScroll) {\n                moreOptions.noScroll = true;\n            } else {\n                // Scroll speed\n                if (this.appDefinition.scrollSpeed > 0) {\n                    moreOptions.scrollSpeed = this.appDefinition.scrollSpeed;\n                }\n\n                // Repeat\n                if (this.appDefinition.repeat > 0) {\n                    moreOptions.repeat = this.appDefinition.repeat;\n                }\n            }\n\n            // Icon\n            if (this.appDefinition.icon) {\n                moreOptions.icon = this.appDefinition.icon;\n            }\n\n            // Duration\n            if (this.appDefinition.duration > 0) {\n                moreOptions.duration = this.appDefinition.duration;\n            }\n\n            // Thresholds\n            if (typeof val === 'number') {\n                if (this.appDefinition.thresholdLtActive && val < this.appDefinition.thresholdLtValue) {\n                    this.adapter.log.debug(`[createAppRequestObj] LT < custom app \"${this.appDefinition.name}\" has a value (${val}) less than ${this.appDefinition.thresholdLtValue} - overriding values`);\n\n                    if (this.appDefinition.thresholdLtIcon) {\n                        moreOptions.icon = this.appDefinition.thresholdLtIcon;\n                    }\n                    if (this.appDefinition.thresholdLtTextColor) {\n                        moreOptions.color = this.appDefinition.thresholdLtTextColor;\n                        moreOptions.rainbow = false; // disable rainbow\n                    }\n                    if (this.appDefinition.thresholdLtBackgroundColor) {\n                        moreOptions.background = this.appDefinition.thresholdLtBackgroundColor;\n    \n                        if (this.appDefinition.useBackgroundEffect) {\n                            delete moreOptions.effect;\n                        }\n                    }\n                } else if (this.appDefinition.thresholdGtActive && val > this.appDefinition.thresholdGtValue) {\n                    this.adapter.log.debug(`[createAppRequestObj] GT > custom app \"${this.appDefinition.name}\" has a value (${val}) greater than ${this.appDefinition.thresholdGtValue} - overriding values`);\n    \n                    if (this.appDefinition.thresholdGtIcon) {\n                        moreOptions.icon = this.appDefinition.thresholdGtIcon;\n                    }\n                    if (this.appDefinition.thresholdGtTextColor) {\n                        moreOptions.color = this.appDefinition.thresholdGtTextColor;\n                        moreOptions.rainbow = false; // disable rainbow\n                    }\n                    if (this.appDefinition.thresholdGtBackgroundColor) {\n                        moreOptions.background = this.appDefinition.thresholdGtBackgroundColor;\n    \n                        if (this.appDefinition.useBackgroundEffect) {\n                            delete moreOptions.effect;\n                        }\n                    }\n                }\n            }\n\n            return {\n                text,\n                textCase: 2, // show as sent\n                pos: this.appDefinition.position,\n                ...moreOptions,\n            };\n        }\n\n        private async refresh(): Promise<void> {\n            if (this.apiClient.isConnected()) {\n                const text = String(this.appDefinition.text).trim();\n\n                if (this.objCache && text.includes('%s')) {\n                    this.adapter.log.debug(`[refreshCustomApp] Refreshing custom app \"${this.appDefinition.name}\" with icon \"${this.appDefinition.icon}\" and text \"${this.appDefinition.text}\"`);\n\n                    try {\n                        const appVisibleState = await this.adapter.getStateAsync(`apps.${this.appDefinition.name}.visible`);\n                        const appVisible = appVisibleState ? appVisibleState.val : true;\n\n                        if (appVisible) {\n                            const val = this.objCache.val;\n\n                            if (typeof val !== 'undefined') {\n                                let newVal = val;\n\n                                if (this.objCache.type === 'number') {\n                                    const oldVal = typeof val !== 'number' ? parseFloat(val as string) : val;\n                                    const decimals = typeof this.appDefinition.decimals === 'string' ? parseInt(this.appDefinition.decimals) : this.appDefinition.decimals ?? 3;\n\n                                    if (!isNaN(oldVal) && oldVal % 1 !== 0) {\n                                        let countDecimals = String(val).split('.')[1].length || 2;\n\n                                        if (countDecimals > decimals) {\n                                            countDecimals = decimals; // limit\n                                        }\n\n                                        const numFormat = this.adapter.config.numberFormat;\n                                        if (numFormat === 'system') {\n                                            newVal = this.adapter.formatValue(oldVal, countDecimals);\n                                        } else if (['.,', ',.'].includes(numFormat)) {\n                                            newVal = this.adapter.formatValue(oldVal, countDecimals, numFormat);\n                                        } else if (numFormat === '.') {\n                                            newVal = oldVal.toFixed(countDecimals);\n                                        } else if (numFormat === ',') {\n                                            newVal = oldVal.toFixed(countDecimals).replace('.', ',');\n                                        }\n\n                                        this.adapter.log.debug(`[refreshCustomApp] formatted value of objId \"${this.appDefinition.objId}\" from ${oldVal} to ${newVal} (${countDecimals} decimals) with \"${numFormat}\"`);\n                                    }\n                                }\n\n                                const displayText = text\n                                    .replace('%s', newVal as string)\n                                    .replace('%u', this.objCache.unit ?? '')\n                                    .trim();\n\n                                if (displayText.length > 0) {\n                                    await this.apiClient!.appRequestAsync(this.appDefinition.name, this.createAppRequestObj(displayText, val)).catch((error) => {\n                                        this.adapter.log.warn(`(custom?name=${this.appDefinition.name}) Unable to update custom app \"${this.appDefinition.name}\": ${error}`);\n                                    });\n                                } else {\n                                    // Empty text => remove app\n                                    this.adapter.log.debug(`[refreshCustomApp] Going to remove app \"${this.appDefinition.name}\" (empty text)`);\n\n                                    await this.apiClient!.appRequestAsync(this.appDefinition.name).catch((error) => {\n                                        this.adapter.log.warn(`[refreshCustomApp] Unable to remove app \"${this.appDefinition.name}\" (empty text): ${error}`);\n                                    });\n                                }\n                            } else {\n                                // No state value => remove app\n                                this.adapter.log.debug(`[refreshCustomApp] Going to remove app \"${this.appDefinition.name}\" (no state data)`);\n\n                                await this.apiClient!.appRequestAsync(this.appDefinition.name).catch((error) => {\n                                    this.adapter.log.warn(`Unable to remove customApp app \"${this.appDefinition.name}\" (no state data): ${error}`);\n                                });\n                            }\n                        }\n                    } catch (error) {\n                        this.adapter.log.error(`[refreshCustomApp] Unable to refresh app \"${this.appDefinition.name}\": ${error}`);\n                    }\n                }\n            }\n        }\n\n        protected override async stateChanged(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            if (this.objCache) {\n                if (id && state && id === this.appDefinition.objId) {\n                    if (state.ack) {\n                        // Just refresh if value has changed\n                        if (state.val !== this.objCache.val) {\n                            this.adapter.log.debug(`[onStateChange] received state change of objId \"${id}\" from ${this.objCache.val} to ${state.val} (ts: ${state.ts})`);\n\n                            if (this.objCache.ts + this.adapter.config.ignoreNewValueForAppInTimeRange * 1000 < state.ts) {\n                                this.objCache.val = this.objCache.type === 'mixed' ? String(state.val) : state.val;\n                                this.objCache.ts = state.ts;\n\n                                this.refresh();\n                            } else {\n                                this.adapter.log.debug(\n                                    `[onStateChange] ignoring customApps state change of objId \"${id}\" to ${state.val} - refreshes too fast (within ${\n                                        this.adapter.config.ignoreNewValueForAppInTimeRange\n                                    } seconds) - Last update: ${this.adapter.formatDate(this.objCache.ts, 'YYYY-MM-DD hh:mm:ss.sss')}`,\n                                );\n                            }\n                        }\n                    } else {\n                        this.adapter.log.debug(`[onStateChange] ignoring customApps state change of \"${id}\" to ${state.val} - ack is false`);\n                    }\n                }\n            }\n        }\n\n        protected override async objectChanged(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n            if (this.objCache) {\n                if (id && id === this.appDefinition.objId) {\n                    if (!obj) {\n                        this.objCache = undefined;\n                    } else {\n                        this.objCache.type = obj?.common.type;\n                        this.objCache.unit = obj?.common?.unit;\n\n                        this.refresh();\n                    }\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["AppType", "AbstractAppType"]
}
