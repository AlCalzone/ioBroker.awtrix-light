{
  "version": 3,
  "sources": ["../../../src/lib/app-type/history.ts"],
  "sourcesContent": ["import { AwtrixLight } from '../../main';\nimport { HistoryApp } from '../adapter-config';\nimport { AwtrixApi } from '../api';\nimport { AppType as AbstractAppType } from './abstract';\n\nexport namespace AppType {\n    export class History extends AbstractAppType.AbstractApp {\n        private appDefinition: HistoryApp;\n\n        public constructor(apiClient: AwtrixApi.Client, adapter: AwtrixLight, definition: HistoryApp) {\n            super(apiClient, adapter, definition);\n\n            this.appDefinition = definition;\n        }\n\n        public override async init(): Promise<void> {\n            let isValidSourceInstance = false;\n\n            if (this.appDefinition.sourceInstance) {\n                const sourceInstanceObj = await this.adapter.getForeignObjectAsync(`system.adapter.${this.appDefinition.sourceInstance}`);\n\n                if (sourceInstanceObj && sourceInstanceObj.common?.getHistory) {\n                    const sourceInstanceAliveState = await this.adapter.getForeignStateAsync(`system.adapter.${this.appDefinition.sourceInstance}.alive`);\n\n                    if (sourceInstanceAliveState && sourceInstanceAliveState.val) {\n                        this.adapter.log.debug(`[initHistoryApp] Found valid source instance for history data: ${this.appDefinition.sourceInstance}`);\n\n                        isValidSourceInstance = true;\n                    } else {\n                        this.adapter.log.warn(`[initHistoryApp] Unable to get history data of \"${this.appDefinition.sourceInstance}\": instance not running (stopped)`);\n                    }\n                } else {\n                    this.adapter.log.warn(`[initHistoryApp] Unable to get history data of \"${this.appDefinition.sourceInstance}\": no valid source for getHistory()`);\n                }\n            }\n\n            if (this.appDefinition.objId) {\n                this.adapter.log.debug(`[initHistoryApp] getting history data for app \"${this.appDefinition.name}\" of \"${this.appDefinition.objId}\" from ${this.appDefinition.sourceInstance}`);\n\n                try {\n                    const appVisibleState = await this.adapter.getStateAsync(`apps.${this.appDefinition.name}.visible`);\n                    const appVisible = appVisibleState ? appVisibleState.val : true;\n\n                    // Ack if changed while instance was stopped\n                    if (appVisibleState && !appVisibleState?.ack) {\n                        await this.adapter.setStateAsync(`apps.${this.appDefinition.name}.visible`, { val: appVisible, ack: true, c: 'initHistoryApp' });\n                    }\n\n                    if (!appVisible) {\n                        this.adapter.log.debug(`[initHistoryApp] Going to remove app \"${this.appDefinition.name}\" (was hidden by state: apps.${this.appDefinition.name}.visible)`);\n\n                        await this.apiClient!.removeAppAsync(this.appDefinition.name).catch((error) => {\n                            this.adapter.log.warn(`[initHistoryApp] Unable to remove app \"${this.appDefinition.name}\" (hidden by state): ${error}`);\n                        });\n                    } else if (isValidSourceInstance) {\n                        const sourceObj = await this.adapter.getForeignObjectAsync(this.appDefinition.objId);\n\n                        if (sourceObj && Object.prototype.hasOwnProperty.call(sourceObj?.common?.custom ?? {}, this.appDefinition.sourceInstance)) {\n                            const itemCount = this.appDefinition.icon ? 11 : 16; // Can display 11 values with icon or 16 values without icon\n\n                            const historyData = await this.adapter.sendToAsync(this.appDefinition.sourceInstance, 'getHistory', {\n                                id: this.appDefinition.objId,\n                                options: {\n                                    start: 1,\n                                    end: Date.now(),\n                                    aggregate: 'none',\n                                    limit: itemCount,\n                                    returnNewestEntries: true,\n                                    ignoreNull: 0,\n                                    removeBorderValues: true,\n                                    ack: true,\n                                },\n                            });\n                            const lineData = (historyData as any)?.result\n                                .filter((state: ioBroker.State) => typeof state.val === 'number' && state.ack)\n                                .map((state: ioBroker.State) => Math.round(state.val as number))\n                                .slice(itemCount * -1);\n\n                            this.adapter.log.debug(\n                                `[initHistoryApp] Data for app \"${this.appDefinition.name}\" of \"${this.appDefinition.objId}: ${JSON.stringify(historyData)} - filtered: ${JSON.stringify(lineData)}`,\n                            );\n\n                            if (lineData.length > 0) {\n                                const moreOptions: AwtrixApi.App = {};\n\n                                // Duration\n                                if (this.appDefinition.duration > 0) {\n                                    moreOptions.duration = this.appDefinition.duration;\n                                }\n\n                                // Repeat\n                                if (this.appDefinition.repeat > 0) {\n                                    moreOptions.repeat = this.appDefinition.repeat;\n                                }\n\n                                await this.apiClient!.appRequestAsync(this.appDefinition.name, {\n                                    color: this.appDefinition.lineColor || '#FF0000',\n                                    background: this.appDefinition.backgroundColor || '#000000',\n                                    line: lineData,\n                                    autoscale: true,\n                                    icon: this.appDefinition.icon,\n                                    lifetime: this.adapter.config.historyAppsRefreshInterval + 60, // Remove app if there is no update in configured interval (+ buffer)\n                                    pos: this.appDefinition.position,\n                                    ...moreOptions,\n                                }).catch((error) => {\n                                    this.adapter.log.warn(`(custom?name=${this.appDefinition.name}) Unable to create app \"${this.appDefinition.name}\": ${error}`);\n                                });\n                            } else {\n                                this.adapter.log.debug(`[initHistoryApp] Going to remove app \"${this.appDefinition.name}\" (no history data)`);\n\n                                await this.apiClient!.removeAppAsync(this.appDefinition.name).catch((error) => {\n                                    this.adapter.log.warn(`Unable to remove app \"${this.appDefinition.name}\" (no history data): ${error}`);\n                                });\n                            }\n                        } else {\n                            this.adapter.log.info(`[initHistoryApp] Unable to get data for app \"${this.appDefinition.name}\" of \"${this.appDefinition.objId}\": logging is not configured for this object`);\n                        }\n                    } else {\n                        this.adapter.log.info(`[initHistoryApp] Unable to get data for app \"${this.appDefinition.name}\" of \"${this.appDefinition.objId}\": source invalid or unavailable`);\n                    }\n                } catch (error) {\n                    this.adapter.log.error(`[initHistoryApp] Unable to get data for app \"${this.appDefinition.name}\" of \"${this.appDefinition.objId}\": ${error}`);\n                }\n            }\n\n            super.init();\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["AppType", "AbstractAppType"]
}
