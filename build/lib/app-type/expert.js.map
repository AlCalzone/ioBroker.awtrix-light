{
  "version": 3,
  "sources": ["../../../src/lib/app-type/expert.ts"],
  "sourcesContent": ["import { AwtrixLight } from '../../main';\nimport { ExpertApp } from '../adapter-config';\nimport { AwtrixApi } from '../api';\nimport { AppType as AbstractAppType } from './abstract';\n\nexport namespace AppType {\n    export class Expert extends AbstractAppType.AbstractApp {\n        private appDefinition: ExpertApp;\n\n        public constructor(apiClient: AwtrixApi.Client, adapter: AwtrixLight, definition: ExpertApp) {\n            super(apiClient, adapter, definition);\n\n            this.appDefinition = definition;\n        }\n\n        public override async init(): Promise<boolean> {\n            const appName = this.getName();\n\n            const appStates = await this.adapter.getStatesAsync(`apps.${appName}.*`);\n            this.adapter.log.debug(`[initExpertApp] current states of app \"${appName}\": ${JSON.stringify(appStates)}`);\n\n            return super.init();\n        }\n\n        public override async refresh(): Promise<boolean> {\n            const refreshed = false;\n\n            if (await super.refresh()) {\n                \n            }\n\n            return refreshed;\n        }\n\n        public async createObjects(prefix: string): Promise<void> {\n            const appName = this.getName();\n\n            await this.adapter.setObjectNotExistsAsync(`${prefix}.${appName}.text`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Text',\n                        de: 'Text',\n                        ru: '\u0422\u0435\u043A\u0441\u0442',\n                        pt: 'Texto',\n                        nl: 'Text',\n                        fr: 'Texte',\n                        it: 'Testo',\n                        es: 'Texto',\n                        pl: 'Tekst',\n                        //uk: '\u0413\u043E\u043B\u043E\u0432\u043D\u0430',\n                        'zh-cn': '\u6848\u6587',\n                    },\n                    type: 'string',\n                    role: 'text',\n                    read: true,\n                    write: true,\n                    def: '',\n                },\n                native: {\n                    attribute: 'text',\n                },\n            });\n        }\n\n        protected override async stateChanged(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            const idNoNamespace = this.adapter.removeNamespace(id);\n            const appName = this.getName();\n\n            // Handle default states for all apps\n            if (id && state && !state.ack) {\n                if (idNoNamespace == `apps.${appName}.text`) {\n                    this.adapter.log.debug(`[onStateChange] New value for expert app \"${appName}\": \"${state.val}\"`);\n\n                    await this.adapter.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,sBAA2C;AAEpC,IAAU;AAAA,CAAV,CAAUA,aAAV;AACI,QAAM,eAAe,gBAAAC,QAAgB,YAAY;AAAA,IAG7C,YAAY,WAA6B,SAAsB,YAAuB;AACzF,YAAM,WAAW,SAAS,UAAU;AAEpC,WAAK,gBAAgB;AAAA,IACzB;AAAA,IAEA,MAAsB,OAAyB;AAC3C,YAAM,UAAU,KAAK,QAAQ;AAE7B,YAAM,YAAY,MAAM,KAAK,QAAQ,eAAe,QAAQ,WAAW;AACvE,WAAK,QAAQ,IAAI,MAAM,0CAA0C,aAAa,KAAK,UAAU,SAAS,GAAG;AAEzG,aAAO,MAAM,KAAK;AAAA,IACtB;AAAA,IAEA,MAAsB,UAA4B;AAC9C,YAAM,YAAY;AAElB,UAAI,MAAM,MAAM,QAAQ,GAAG;AAAA,MAE3B;AAEA,aAAO;AAAA,IACX;AAAA,IAEA,MAAa,cAAc,QAA+B;AACtD,YAAM,UAAU,KAAK,QAAQ;AAE7B,YAAM,KAAK,QAAQ,wBAAwB,GAAG,UAAU,gBAAgB;AAAA,QACpE,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM;AAAA,YACF,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YACJ,IAAI;AAAA,YAEJ,SAAS;AAAA,UACb;AAAA,UACA,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,KAAK;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACJ,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IAEA,MAAyB,aAAa,IAAY,OAAyD;AACvG,YAAM,gBAAgB,KAAK,QAAQ,gBAAgB,EAAE;AACrD,YAAM,UAAU,KAAK,QAAQ;AAG7B,UAAI,MAAM,SAAS,CAAC,MAAM,KAAK;AAC3B,YAAI,iBAAiB,QAAQ,gBAAgB;AACzC,eAAK,QAAQ,IAAI,MAAM,6CAA6C,cAAc,MAAM,MAAM;AAE9F,gBAAM,KAAK,QAAQ,cAAc,eAAe,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,QACjF;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAxEO,EAAAD,SAAM;AAAA,GADA;",
  "names": ["AppType", "AbstractAppType"]
}
