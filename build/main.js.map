{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\nimport * as utils from '@iobroker/adapter-core';\n\nimport axios, { AxiosResponse } from 'axios';\nimport { CustomApp } from './lib/adapter-config';\nimport { rgb565to888Str, rgb565to888StrSvg } from './lib/color-convert';\n\nconst NATIVE_APPS = ['time', 'date', 'temp', 'hum', 'bat'];\n\nnamespace Awtrix {\n    export type App = {\n        text?: string;\n        textCase?: number;\n        topText?: boolean;\n        textOffset?: number;\n        center?: boolean;\n        color?: string;\n        gradient?: string;\n        blinkText?: number;\n        fadeText?: number;\n        background?: string;\n        rainbow?: boolean;\n        icon?: string;\n        pushIcon?: number;\n        repeat?: number;\n        duration?: number;\n        bar?: Array<number>;\n        line?: Array<number>;\n        autoscale?: boolean;\n        progress?: number;\n        progressC?: string;\n        progressBC?: string;\n        pos?: number;\n        draw?: Array<object>;\n        lifetime?: number;\n        lifetimeMode?: number;\n        noScroll?: boolean;\n        scrollSpeed?: number;\n        effect?: string;\n        effectSettings?: Array<object>;\n        save?: boolean;\n    }\n\n    export type Indicator = {\n        color?: string;\n        blink?: number;\n    }\n\n    export type Moodlight = {\n        brightness?: number;\n        color?: string;\n    }\n}\n\nclass AwtrixLight extends utils.Adapter {\n    supportedVersion: string;\n    displayedVersionWarning: boolean;\n\n    apiConnected: boolean;\n    refreshStateTimeout: void | NodeJS.Timeout | null;\n    refreshHistoryAppsTimeout: void | NodeJS.Timeout | null;\n    downloadScreenContentInterval: void | NodeJS.Timeout | null;\n\n    customAppsForeignStates: { [key: string]: { val: string | ioBroker.StateValue | undefined; unit: any; type: string; ts: number; }};\n\n    backgroundEffects: Array<string>;\n\n    lastErrorCode: number;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'awtrix-light',\n            useFormatDate: true,\n        });\n\n        this.supportedVersion = '0.84';\n        this.displayedVersionWarning = false;\n\n        this.apiConnected = false;\n\n        this.refreshStateTimeout = null;\n        this.refreshHistoryAppsTimeout = null;\n        this.downloadScreenContentInterval = null;\n\n        this.customAppsForeignStates = {};\n\n        this.backgroundEffects = [\n            'Fade',\n            'MovingLine',\n            'BrickBreaker',\n            'PingPong',\n            'Radar',\n            'Checkerboard',\n            'Fireworks',\n            'PlasmaCloud',\n            'Ripple',\n            'Snake',\n            'Pacifica',\n            'TheaterChase',\n            'Plasma',\n            'Matrix',\n            'SwirlIn',\n            'SwirlOut',\n            'LookingEyes',\n            'TwinklingStars',\n            'ColorWaves',\n        ];\n\n        this.lastErrorCode = -1;\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n        this.setApiConnected(false);\n\n        await this.upgradeFromPreviousVersion();\n        await this.subscribeStatesAsync('*');\n\n        if (!this.config.awtrixIp) {\n            this.log.error(`IP address not configured - please check instance configuration and restart`);\n            return;\n        } else {\n            this.log.info(`Starting - connecting to http://${this.config.awtrixIp}/`);\n        }\n\n        if (this.config.foreignSettingsInstance && this.config.foreignSettingsInstance !== this.namespace) {\n            await this.subscribeForeignObjectsAsync(`system.adapter.${this.config.foreignSettingsInstance}`);\n            await this.importForeignSettings();\n        }\n\n        // Apply positions of instance configuration\n        if (!this.config.customPositions) {\n            this.log.debug(`[onReady] Setting position of each app as ordered in instance configuration (custom positions are disabled)`);\n\n            let pos = 0;\n            for (const customApp of this.config.customApps) {\n                customApp.position = pos++;\n            }\n\n            for (const historyApp of this.config.historyApps) {\n                historyApp.position = pos++;\n            }\n\n            for (const expertApp of this.config.expertApps) {\n                expertApp.position = pos++;\n            }\n        } else {\n            this.log.debug(`[onReady] Custom positions are enabled - using app positions of instance configuration`);\n        }\n\n        this.refreshState();\n    }\n\n    private async upgradeFromPreviousVersion(): Promise<void> {\n        this.log.debug(`Upgrading objects from previous version`);\n\n        await this.delObjectAsync('apps.eyes', { recursive: true }); // eyes app was removed in firmware 0.71\n    }\n\n    private async importForeignSettings(): Promise<void> {\n        try {\n            this.log.info(`Using settings of other instance: ${this.config.foreignSettingsInstance}`);\n\n            const instanceObj = await this.getForeignObjectAsync(`system.adapter.${this.config.foreignSettingsInstance}`);\n\n            if (instanceObj && instanceObj.native) {\n                if (!instanceObj.native?.foreignSettingsInstance) {\n                    this.config.customApps = instanceObj.native.customApps;\n                    this.config.ignoreNewValueForAppInTimeRange = instanceObj.native.ignoreNewValueForAppInTimeRange;\n                    this.config.historyApps = instanceObj.native.historyApps;\n                    this.config.historyAppsRefreshInterval = instanceObj.native.historyAppsRefreshInterval;\n                    this.config.autoDeleteForeignApps = instanceObj.native.autoDeleteForeignApps;\n                    this.config.removeAppsOnStop = instanceObj.native.removeAppsOnStop;\n                    this.config.expertApps = instanceObj.native.expertApps;\n\n                    this.log.debug(`[importForeignSettings] Copied settings from foreign instance \"system.adapter.${this.config.foreignSettingsInstance}\"`);\n                } else {\n                    throw new Error(`Foreign instance uses instance settings of ${instanceObj?.native?.foreignSettingsInstance} - (nothing imported)`);\n                }\n            } else {\n                throw new Error(`Unable to load instance settings of ${instanceObj?.native?.foreignSettingsInstance} (nothing imported)`);\n            }\n        } catch (err) {\n            this.log.error(`Unable to import settings of other instance: ${err}`);\n        }\n    }\n\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (id && state && Object.prototype.hasOwnProperty.call(this.customAppsForeignStates, id)) {\n            if (state.ack) {\n                // Just refresh if value has changed\n                if (state.val !== this.customAppsForeignStates[id].val) {\n                    this.log.debug(`[onStateChange] received state change of objId \"${id}\" from ${this.customAppsForeignStates[id].val} to ${state.val} (ts: ${state.ts})`);\n\n                    if (this.customAppsForeignStates[id].ts + this.config.ignoreNewValueForAppInTimeRange * 1000 < state.ts) {\n                        this.customAppsForeignStates[id].val = this.customAppsForeignStates[id].type === 'mixed' ? String(state.val) : state.val;\n                        this.customAppsForeignStates[id].ts = state.ts;\n\n                        this.refreshCustomApps(id);\n                    } else {\n                        this.log.debug(\n                            `[onStateChange] ignoring customApps state change of objId \"${id}\" to ${state.val} - refreshes too fast (within ${\n                                this.config.ignoreNewValueForAppInTimeRange\n                            } seconds) - Last update: ${this.formatDate(this.customAppsForeignStates[id].ts, 'YYYY-MM-DD hh:mm:ss.sss')}`,\n                        );\n                    }\n                }\n            } else {\n                this.log.debug(`[onStateChange] ignoring customApps state change of \"${id}\" to ${state.val} - ack is false`);\n            }\n        }\n\n        if (id && state && !state.ack) {\n            const idNoNamespace = this.removeNamespace(id);\n\n            this.log.debug(`state ${idNoNamespace} changed: ${state.val}`);\n\n            if (this.apiConnected) {\n                if (idNoNamespace.startsWith('settings.')) {\n                    this.log.debug(`changing setting ${idNoNamespace} power to ${state.val}`);\n\n                    const settingsObj = await this.getObjectAsync(idNoNamespace);\n                    if (settingsObj && settingsObj.native?.settingsKey) {\n                        this.buildRequestAsync('settings', 'POST', { [settingsObj.native.settingsKey]: state.val })\n                            .then(async (response) => {\n                                if (response.status === 200 && response.data === 'OK') {\n                                    await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                                }\n\n                                await this.refreshSettings();\n                            })\n                            .catch((error) => {\n                                this.log.warn(`(settings) Unable to execute action: ${error}`);\n                            });\n                    } else {\n                        this.log.warn(`Unable to change setting of ${id} - settingsKey not found`);\n                    }\n                } else if (idNoNamespace === 'display.power') {\n                    this.log.debug(`changing display power to ${state.val}`);\n\n                    this.buildRequestAsync('power', 'POST', { power: state.val })\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(power) Unable to execute action: ${error}`);\n                        });\n                } else if (idNoNamespace.startsWith('display.moodlight.')) {\n                    this.updateMoodlightByStates()\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(moodlight) Unable to execute action: ${error}`);\n                        });\n                } else if (idNoNamespace === 'device.update') {\n                    this.log.info('performing firmware update');\n\n                    this.buildRequestAsync('doupdate', 'POST')\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                this.log.info('started firmware update');\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(doupdate) Unable to execute firmware update (maybe this is already the newest version): ${error}`);\n                        });\n                } else if (idNoNamespace === 'device.reboot') {\n                    this.buildRequestAsync('reboot', 'POST')\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                this.log.info('rebooting device');\n                                this.setApiConnected(false);\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(reboot) Unable to execute action: ${error}`);\n                        });\n                } else if (idNoNamespace === 'apps.next') {\n                    this.log.debug('switching to next app');\n\n                    this.buildRequestAsync('nextapp', 'POST').catch((error) => {\n                        this.log.warn(`(nextapp) Unable to execute action: ${error}`);\n                    });\n                } else if (idNoNamespace === 'apps.prev') {\n                    this.log.debug('switching to previous app');\n\n                    this.buildRequestAsync('previousapp', 'POST').catch((error) => {\n                        this.log.warn(`(previousapp) Unable to execute action: ${error}`);\n                    });\n                } else if (idNoNamespace.startsWith('apps.')) {\n                    if (idNoNamespace.endsWith('.activate')) {\n                        if (state.val) {\n                            const sourceObj = await this.getObjectAsync(idNoNamespace);\n                            if (sourceObj && sourceObj.native?.name) {\n                                this.log.debug(`activating app ${sourceObj.native.name}`);\n\n                                this.buildRequestAsync('switch', 'POST', { name: sourceObj.native.name }).catch((error) => {\n                                    this.log.warn(`(switch) Unable to execute action: ${error}`);\n                                });\n                            }\n                        } else {\n                            this.log.warn(`Received invalid value for state ${idNoNamespace}`);\n                        }\n                    } else if (idNoNamespace.endsWith('.visible')) {\n                        const sourceObj = await this.getObjectAsync(idNoNamespace);\n                        if (sourceObj && sourceObj.native?.name) {\n                            this.log.debug(`changing visibility of app ${sourceObj.native.name} to ${state.val}`);\n\n                            await this.setStateAsync(idNoNamespace, { val: state.val, ack: true, c: 'onStateChange' });\n\n                            // ToDo: Just update a single app\n                            await this.initAllApps();\n                        }\n                    } else {\n                        // Expert apps\n                        await this.initExpertApps();\n                    }\n                } else if (idNoNamespace.match(/indicator\\.[0-9]{1}\\..*$/g)) {\n                    const matches = idNoNamespace.match(/indicator\\.([0-9]{1})\\.(.*)$/);\n                    const indicatorNo = matches ? parseInt(matches[1]) : undefined;\n                    const action = matches ? matches[2] : undefined;\n\n                    this.log.debug(`Changed indicator ${indicatorNo} with action ${action}`);\n\n                    if (indicatorNo && indicatorNo >= 1) {\n                        this.updateIndicatorByStates(indicatorNo)\n                            .then(async (response) => {\n                                if (response.status === 200 && response.data === 'OK') {\n                                    await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                                }\n                            })\n                            .catch((error) => {\n                                this.log.warn(`(indicator) Unable to perform action: ${error}`);\n                            });\n                    }\n                }\n            } else {\n                this.log.warn(`Unable to perform action for ${idNoNamespace} - API is not connected (device not reachable?)`);\n            }\n        }\n    }\n\n    private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n        // Imported settings changed\n        if (id && id == `system.adapter.${this.config.foreignSettingsInstance}`) {\n            await this.importForeignSettings();\n\n            // Refresh apps (may have changed)\n            if (this.apiConnected) {\n                await this.createAppObjects();\n                await this.initAllApps();\n            }\n        }\n\n        if (id && Object.prototype.hasOwnProperty.call(this.customAppsForeignStates, id)) {\n            if (!obj) {\n                delete this.customAppsForeignStates[id];\n            } else {\n                this.customAppsForeignStates[id].type = obj?.common.type;\n                this.customAppsForeignStates[id].unit = obj?.common?.unit;\n\n                this.refreshCustomApps(id);\n            }\n        }\n    }\n\n    private onMessage(obj: ioBroker.Message): void {\n        this.log.debug(`[onMessage] received command \"${obj.command}\" with message: ${JSON.stringify(obj.message)}`);\n\n        if (obj && obj.message) {\n            if (obj.command === 'getBackgroundEffects') {\n                this.sendTo(\n                    obj.from,\n                    obj.command,\n                    this.backgroundEffects.map((v) => ({ value: v, label: v })),\n                    obj.callback,\n                );\n            } else if (obj.command === 'notification' && typeof obj.message === 'object') {\n                // Notification\n                if (this.apiConnected) {\n                    const msgFiltered: Awtrix.App = Object.fromEntries(Object.entries(obj.message).filter(([_, v]) => v !== null)); // eslint-disable-line no-unused-vars\n\n                    // Remove repeat if <= 0\n                    if (msgFiltered.repeat !== undefined && msgFiltered.repeat <= 0) {\n                        delete msgFiltered.repeat;\n                    }\n\n                    // Remove duration if <= 0\n                    if (msgFiltered.duration !== undefined && msgFiltered.duration <= 0) {\n                        delete msgFiltered.duration;\n                    }\n\n                    this.buildRequestAsync('notify', 'POST', msgFiltered)\n                        .then((response) => {\n                            this.sendTo(obj.from, obj.command, { error: null, data: response.data }, obj.callback);\n                        })\n                        .catch((error) => {\n                            this.sendTo(obj.from, obj.command, { error }, obj.callback);\n                        });\n                } else {\n                    this.sendTo(obj.from, obj.command, { error: 'API is not connected (device offline ?)' }, obj.callback);\n                }\n            } else if (obj.command === 'sound' && typeof obj.message === 'object') {\n                // Sound\n                if (this.apiConnected) {\n                    const msgFiltered = Object.fromEntries(Object.entries(obj.message).filter(([_, v]) => v !== null)); // eslint-disable-line no-unused-vars\n\n                    this.buildRequestAsync('sound', 'POST', msgFiltered)\n                        .then((response) => {\n                            this.sendTo(obj.from, obj.command, { error: null, data: response.data }, obj.callback);\n                        })\n                        .catch((error) => {\n                            this.sendTo(obj.from, obj.command, { error }, obj.callback);\n                        });\n                } else {\n                    this.sendTo(obj.from, obj.command, { error: 'API is not connected (device offline ?)' }, obj.callback);\n                }\n            } else {\n                this.log.error(`[onMessage] Received incomplete message via \"sendTo\"`);\n\n                if (obj.callback) {\n                    this.sendTo(obj.from, obj.command, { error: 'Incomplete message' }, obj.callback);\n                }\n            }\n        } else if (obj.callback) {\n            this.sendTo(obj.from, obj.command, { error: 'Invalid message' }, obj.callback);\n        }\n    }\n\n    private async setApiConnected(connection: boolean): Promise<void> {\n        if (connection !== this.apiConnected) {\n            await this.setStateChangedAsync('info.connection', { val: connection, ack: true });\n            this.apiConnected = connection;\n\n            if (connection) {\n                // API was offline - refresh all states\n                this.log.debug('API is online');\n\n                try {\n                    // settings\n                    await this.refreshSettings();\n                    await this.refreshBackgroundEffects();\n                    await this.refreshTransitions();\n\n                    // apps\n                    await this.createAppObjects();\n                    await this.initAllApps();\n\n                    // Subscribe to all states\n                    await this.subscribeForeignStatesAsync(Object.keys(this.customAppsForeignStates));\n\n                    // indicators\n                    for (let i = 1; i <= 3; i++) {\n                        await this.updateIndicatorByStates(i);\n                    }\n\n                    // moodlight\n                    await this.updateMoodlightByStates();\n\n                    // welcome (ioBroker icon)\n                    this.buildRequestAsync('notify', 'POST', {\n                        duration: 2,\n                        draw: [\n                            {\n                                dc: [16, 4, 3, '#164477'], // [x, y, r, cl] Draw a circle with center at (x, y), radius r, and color cl\n                                dl: [16, 3, 16, 8, '#3399cc'], // [x0, y0, x1, y1, cl] Draw a line from (x0, y0) to (x1, y1) with color cl\n                                dp: [16, 1, '#3399cc'], // [x, y, cl] Draw a pixel at position (x, y) with color cl\n                            },\n                        ],\n                    }).catch((error) => {\n                        this.log.warn(error);\n                    });\n\n                    if (this.config.downloadScreenContent && !this.downloadScreenContentInterval) {\n                        this.log.debug(`[setApiConnected] Downloading screen contents every ${this.config.downloadScreenContentInterval} seconds`);\n\n                        this.downloadScreenContentInterval = this.setInterval(() => {\n                            if (this.apiConnected) {\n                                this.buildRequestAsync('screen', 'GET')\n                                    .then(async (response) => {\n                                        if (response.status === 200) {\n                                            const pixelData = response.data;\n                                            const width = 640;\n                                            const height = 160;\n                                            const scaleX = width / 32;\n                                            const scaleY = height / 8;\n\n                                            let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 640 160\">`;\n\n                                            for (let y = 0; y < 8; y++) {\n                                                for (let x = 0; x < 32; x++) {\n                                                    const color = rgb565to888StrSvg(pixelData[y * 32 + x]);\n                                                    svg += `\\n  <rect style=\"fill: ${color}; stroke: #000000; stroke-width: 2px;\" `;\n                                                    svg += `x=\"${x * scaleX}\" y=\"${y * scaleY}\" width=\"${scaleX}\" height=\"${scaleY}\"/>`;\n                                                }\n                                            }\n\n                                            svg += '\\n</svg>';\n\n                                            await this.setStateAsync('display.content', { val: svg, ack: true });\n                                        }\n                                    })\n                                    .catch((error) => {\n                                        this.log.debug(`(screen) received error: ${JSON.stringify(error)}`);\n                                    });\n                            }\n                        }, this.config.downloadScreenContentInterval * 1000);\n                    } else {\n                        await this.setStateAsync('display.content', { val: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"640\" height=\"160\"/>`, ack: true, c: 'Feature disabled', q: 0x01 });\n                    }\n                } catch (error) {\n                    this.log.error(`[setApiConnected] Unable to refresh settings, apps or indicators: ${error}`);\n                }\n            } else {\n                if (this.downloadScreenContentInterval) {\n                    this.clearInterval(this.downloadScreenContentInterval);\n                    this.downloadScreenContentInterval = null;\n                }\n\n                // Unsubscribe from all states to avoid errors\n                await this.unsubscribeForeignStatesAsync(Object.keys(this.customAppsForeignStates));\n\n                this.log.debug('API is offline');\n            }\n        }\n    }\n\n    private refreshState(): void {\n        this.log.debug('refreshing device state');\n\n        this.buildRequestAsync('stats', 'GET')\n            .then(async (response) => {\n                if (response.status === 200) {\n                    const content = response.data;\n\n                    this.setApiConnected(true);\n\n                    if (this.isNewerVersion(content.version, this.supportedVersion) && !this.displayedVersionWarning) {\n                        this.log.warn(`You should update your Awtrix Light - supported version of this adapter is ${this.supportedVersion} (or later). Your current version is ${content.version}`);\n                        this.displayedVersionWarning = true; // Just show once\n                    }\n\n                    await this.setStateChangedAsync('meta.version', { val: content.version, ack: true });\n\n                    await this.setStateChangedAsync('sensor.lux', { val: parseInt(content.lux), ack: true });\n                    await this.setStateChangedAsync('sensor.temp', { val: parseInt(content.temp), ack: true });\n                    await this.setStateChangedAsync('sensor.humidity', { val: parseInt(content.hum), ack: true });\n\n                    await this.setStateChangedAsync('display.brightness', { val: content.bri, ack: true });\n\n                    await this.setStateChangedAsync('device.battery', { val: content.bat, ack: true });\n                    await this.setStateChangedAsync('device.wifiSignal', { val: content.wifi_signal, ack: true });\n                    await this.setStateChangedAsync('device.freeRAM', { val: content.ram, ack: true });\n                    await this.setStateChangedAsync('device.uptime', { val: parseInt(content.uptime), ack: true });\n                }\n            })\n            .catch((error) => {\n                this.log.debug(`(stats) received error - API is now offline: ${JSON.stringify(error)}`);\n                this.setApiConnected(false);\n            });\n\n        this.log.debug('re-creating refresh state timeout');\n        this.refreshStateTimeout =\n            this.refreshStateTimeout ||\n            this.setTimeout(() => {\n                this.refreshStateTimeout = null;\n                this.refreshState();\n            }, 60000);\n    }\n\n    private async refreshSettings(): Promise<number> {\n        return new Promise<number>((resolve, reject) => {\n            this.buildRequestAsync('settings', 'GET')\n                .then(async (response) => {\n                    if (response.status === 200) {\n                        const content = response.data;\n\n                        const settingsStates = await this.getObjectViewAsync('system', 'state', {\n                            startkey: `${this.namespace}.settings.`,\n                            endkey: `${this.namespace}.settings.\\u9999`,\n                        });\n\n                        // Find all available settings objects with settingsKey\n                        const knownSettings: { [key: string]: { id: string; role: string } } = {};\n                        for (const settingsObj of settingsStates.rows) {\n                            if (settingsObj.value?.native?.settingsKey) {\n                                knownSettings[this.removeNamespace(settingsObj.value?.native?.settingsKey)] = {\n                                    id: settingsObj.id,\n                                    role: settingsObj.value.common.role,\n                                };\n                            }\n                        }\n\n                        for (const [settingsKey, val] of Object.entries(content)) {\n                            if (Object.prototype.hasOwnProperty.call(knownSettings, settingsKey)) {\n                                if (knownSettings[settingsKey].role === 'level.color.rgb') {\n                                    const newVal = rgb565to888Str(val as number);\n                                    this.log.debug(`[refreshSettings] updating settings value \"${knownSettings[settingsKey].id}\" to ${newVal} (converted from ${val})`);\n\n                                    await this.setStateChangedAsync(knownSettings[settingsKey].id, { val: newVal, ack: true, c: 'Updated from API (converted from RGB565)' });\n                                } else {\n                                    this.log.debug(`[refreshSettings] updating settings value \"${knownSettings[settingsKey].id}\" to ${val}`);\n\n                                    await this.setStateChangedAsync(knownSettings[settingsKey].id, { val: val as string | number, ack: true, c: 'Updated from API' });\n                                }\n                            }\n                        }\n                    }\n\n                    resolve(response.status);\n                })\n                .catch((error) => {\n                    this.log.warn(`(settings) Received error: ${JSON.stringify(error)}`);\n\n                    reject(error);\n                });\n        });\n    }\n\n    private async refreshBackgroundEffects(): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.buildRequestAsync('effects')\n                .then((response) => {\n                    if (response.status === 200) {\n                        this.log.debug(`[refreshBackgroundEffects] Existing effects \"${JSON.stringify(response.data)}\"`);\n\n                        this.backgroundEffects = response.data;\n\n                        resolve(true);\n                    } else {\n                        reject(`${response.status}: ${response.data}`);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    private async refreshTransitions(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.buildRequestAsync('transitions')\n                .then((response) => {\n                    if (response.status === 200) {\n                        this.log.debug(`[refreshTransitions] Existing transitions \"${JSON.stringify(response.data)}\"`);\n\n                        const states: { [key: string]: string } = {};\n                        for (let i = 0; i < response.data.length; i++) {\n                            states[i] = response.data[i];\n                        }\n\n                        this.extendObjectAsync('settings.appTransitionEffect', {\n                            common: {\n                                states,\n                            },\n                        }).then(() => {\n                            resolve();\n                        });\n                    } else {\n                        reject(`${response.status}: ${response.data}`);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    private async removeApp(name: string): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            if (this.apiConnected) {\n                this.buildAppRequestAsync(name)\n                    .then((response) => {\n                        if (response.status === 200 && response.data === 'OK') {\n                            this.log.debug(`[removeApp] Removed customApp app \"${name}\"`);\n                            resolve(true);\n                        } else {\n                            reject(`${response.status}: ${response.data}`);\n                        }\n                    })\n                    .catch(reject);\n            } else {\n                reject('API not connected');\n            }\n        });\n    }\n\n    private async initAllApps(): Promise<void> {\n        await this.initCustomApps();\n        await this.initHistoryApps();\n        await this.initExpertApps();\n    }\n\n    private async initCustomApps(): Promise<void> {\n        if (this.apiConnected) {\n            for (const customApp of this.config.customApps) {\n                if (customApp.name) {\n                    const text = String(customApp.text).trim();\n                    const appVisibleState = await this.getStateAsync(`apps.${customApp.name}.visible`);\n                    const appVisible = appVisibleState ? appVisibleState.val : true;\n\n                    // Ack if changed while instance was stopped\n                    if (appVisibleState && !appVisibleState?.ack) {\n                        await this.setStateAsync(`apps.${customApp.name}.visible`, { val: appVisible, ack: true, c: 'initCustomApps' });\n                    }\n\n                    if (!appVisible) {\n                        this.log.debug(`[initCustomApps] Going to remove custom app \"${customApp.name}\" (was hidden by state: apps.${customApp.name}.visible)`);\n\n                        await this.removeApp(customApp.name).catch((error) => {\n                            this.log.warn(`Unable to remove customApp app \"${customApp.name}\" (hidden by state): ${error}`);\n                        });\n                    } else if (customApp.objId && text.includes('%s')) {\n                        try {\n                            const objId = customApp.objId;\n                            if (!Object.prototype.hasOwnProperty.call(this.customAppsForeignStates, objId)) {\n                                const obj = await this.getForeignObjectAsync(objId);\n                                if (obj && obj.type === 'state') {\n                                    const state = await this.getForeignStateAsync(objId);\n\n                                    this.customAppsForeignStates[objId] = {\n                                        val: state && state.ack ? state.val : undefined,\n                                        type: obj?.common.type,\n                                        unit: obj?.common?.unit,\n                                        ts: state ? state.ts : Date.now(),\n                                    };\n\n                                    const supportedTypes = ['string', 'number', 'mixed'];\n                                    if (obj?.common.type && !supportedTypes.includes(obj.common.type)) {\n                                        this.log.warn(\n                                            `[initCustomApps] Object of app \"${customApp.name}\" with objId \"${objId}\" has invalid type: ${obj.common.type} instead of ${supportedTypes.join(', ')}`,\n                                        );\n                                    }\n\n                                    if (text.includes('%u') && !obj?.common?.unit) {\n                                        this.log.warn(\n                                            `[initCustomApps] Object of custom app \"${customApp.name}\" (${objId}) has no unit - remove \"%u\" from text or define unit in object (common.unit)`,\n                                        );\n                                    }\n\n                                    if (state && !state.ack) {\n                                        this.log.info(`[initCustomApps] State value of custom app \"${customApp.name}\" (${objId}) is not acknowledged (ack: false) - waiting for new value`);\n                                    }\n\n                                    await this.subscribeForeignStatesAsync(objId);\n                                    await this.subscribeForeignObjectsAsync(objId);\n\n                                    this.log.debug(`[initCustomApps] Found custom app \"${customApp.name}\" with objId \"${objId}\" - subscribed to changes`);\n                                } else {\n                                    this.log.warn(`[initCustomApps] Custom app \"${customApp.name}\" was configured with invalid objId \"${objId}\": Invalid type ${obj?.type}`);\n                                }\n                            } else {\n                                this.log.debug(`[initCustomApps] Found custom app \"${customApp.name}\" with objId \"${objId}\" - already subscribed to changes`);\n                            }\n                        } catch (error) {\n                            this.log.error(`[initCustomApps] Unable to get object information for custom app \"${customApp.name}\": ${error}`);\n                        }\n                    } else if (text.length > 0) {\n                        // App with static text (no %s specified)\n                        this.log.debug(`[initCustomApps] Creating custom app \"${customApp.name}\" with icon \"${customApp.icon}\" and static text \"${customApp.text}\"`);\n\n                        if (customApp.objId) {\n                            this.log.warn(\n                                `[initCustomApps] Custom app \"${customApp.name}\" was defined with objId \"${customApp.objId}\" but \"%s\" is not used in the text - state changes will be ignored`,\n                            );\n                        }\n\n                        const displayText = text.replace('%u', '').trim();\n\n                        if (displayText.length > 0) {\n                            await this.buildAppRequestAsync(customApp.name, this.createAppRequestObj(customApp, displayText)).catch((error) => {\n                                this.log.warn(`(custom?name=${customApp.name}) Unable to create custom app \"${customApp.name}\" with static text: ${error}`);\n                            });\n                        } else {\n                            // Empty text => remove app\n                            this.log.debug(`[initCustomApps] Going to remove custom app \"${customApp.name}\" with static text (empty text)`);\n\n                            await this.removeApp(customApp.name).catch((error) => {\n                                this.log.warn(`Unable to remove customApp app \"${customApp.name}\" with static text (empty text): ${error}`);\n                            });\n                        }\n                    }\n                } else {\n                    this.log.warn(`[initCustomApps] Found custom app without name (skipped) - please check instance configuartion`);\n                }\n            }\n\n            // Trigger update for all found objIds\n            for (const objId of Object.keys(this.customAppsForeignStates)) {\n                await this.refreshCustomApps(objId);\n            }\n        }\n    }\n\n    private async refreshCustomApps(objId: string): Promise<void> {\n        if (this.apiConnected && Object.prototype.hasOwnProperty.call(this.customAppsForeignStates, objId)) {\n            this.log.debug(`[refreshCustomApps] Refreshing custom apps for objId \"${objId}\" with data ${JSON.stringify(this.customAppsForeignStates[objId])}`);\n\n            for (const customApp of this.config.customApps) {\n                if (customApp.name) {\n                    const text = String(customApp.text).trim();\n\n                    if (customApp.objId && customApp.objId === objId && text.includes('%s')) {\n                        this.log.debug(`[refreshCustomApps] Refreshing custom app \"${customApp.name}\" with icon \"${customApp.icon}\" and text \"${customApp.text}\"`);\n\n                        try {\n                            const appVisibleState = await this.getStateAsync(`apps.${customApp.name}.visible`);\n                            const appVisible = appVisibleState ? appVisibleState.val : true;\n\n                            if (appVisible) {\n                                const val = this.customAppsForeignStates[objId].val;\n\n                                if (typeof val !== 'undefined') {\n                                    let newVal = val;\n\n                                    if (this.customAppsForeignStates[objId].type === 'number') {\n                                        const oldVal = typeof val !== 'number' ? parseFloat(val as string) : val;\n                                        const decimals = typeof customApp.decimals === 'string' ? parseInt(customApp.decimals) : customApp.decimals ?? 3;\n\n                                        if (!isNaN(oldVal) && oldVal % 1 !== 0) {\n                                            let countDecimals = String(val).split('.')[1].length || 2;\n\n                                            if (countDecimals > decimals) {\n                                                countDecimals = decimals; // limit\n                                            }\n\n                                            const numFormat = this.config.numberFormat;\n                                            if (numFormat === 'system') {\n                                                newVal = this.formatValue(oldVal, countDecimals);\n                                            } else if (['.,', ',.'].includes(numFormat)) {\n                                                newVal = this.formatValue(oldVal, countDecimals, numFormat);\n                                            } else if (numFormat === '.') {\n                                                newVal = oldVal.toFixed(countDecimals);\n                                            } else if (numFormat === ',') {\n                                                newVal = oldVal.toFixed(countDecimals).replace('.', ',');\n                                            }\n\n                                            this.log.debug(`[refreshCustomApps] formatted value of objId \"${objId}\" from ${oldVal} to ${newVal} (${countDecimals} decimals) with \"${numFormat}\"`);\n                                        }\n                                    }\n\n                                    const displayText = text\n                                        .replace('%s', newVal as string)\n                                        .replace('%u', this.customAppsForeignStates[objId].unit ?? '')\n                                        .trim();\n\n                                    if (displayText.length > 0) {\n                                        await this.buildAppRequestAsync(customApp.name, this.createAppRequestObj(customApp, displayText, val)).catch((error) => {\n                                            this.log.warn(`(custom?name=${customApp.name}) Unable to update custom app \"${customApp.name}\": ${error}`);\n                                        });\n                                    } else {\n                                        // Empty text => remove app\n                                        this.log.debug(`[refreshCustomApps] Going to remove custom app \"${customApp.name}\" (empty text)`);\n\n                                        await this.removeApp(customApp.name).catch((error) => {\n                                            this.log.warn(`Unable to remove customApp app \"${customApp.name}\" (empty text): ${error}`);\n                                        });\n                                    }\n                                } else {\n                                    // No state value => remove app\n                                    this.log.debug(`[refreshCustomApps] Going to remove custom app \"${customApp.name}\" (no state data)`);\n\n                                    await this.removeApp(customApp.name).catch((error) => {\n                                        this.log.warn(`Unable to remove customApp app \"${customApp.name}\" (no state data): ${error}`);\n                                    });\n                                }\n                            }\n                        } catch (error) {\n                            this.log.error(`[refreshCustomApps] Unable to refresh custom app \"${customApp.name}\": ${error}`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private createAppRequestObj(customApp: CustomApp, text: string, val?: ioBroker.StateValue): Awtrix.App {\n        const moreOptions: Awtrix.App = {};\n\n        // Background\n        if (customApp.useBackgroundEffect) {\n            moreOptions.effect = customApp.backgroundEffect;\n        } else if (customApp.backgroundColor) {\n            moreOptions.background = customApp.backgroundColor;\n        }\n\n        // Set rainbow colors OR text color\n        if (customApp.rainbow) {\n            moreOptions.rainbow = true;\n        } else if (customApp.textColor) {\n            moreOptions.color = customApp.textColor;\n        }\n\n        // Set noScroll OR scroll speed\n        if (customApp.noScroll) {\n            moreOptions.noScroll = true;\n        } else {\n            // Scroll speed\n            if (customApp.scrollSpeed > 0) {\n                moreOptions.scrollSpeed = customApp.scrollSpeed;\n            }\n\n            // Repeat\n            if (customApp.repeat > 0) {\n                moreOptions.repeat = customApp.repeat;\n            }\n        }\n\n        // Icon\n        if (customApp.icon) {\n            moreOptions.icon = customApp.icon;\n        }\n\n        // Duration\n        if (customApp.duration > 0) {\n            moreOptions.duration = customApp.duration;\n        }\n\n        // Thresholds\n        if (typeof val === 'number') {\n            if (customApp.thresholdLtActive && val < customApp.thresholdLtValue) {\n                this.log.debug(`[createAppRequestObj] LT < custom app \"${customApp.name}\" has a value (${val}) less than ${customApp.thresholdLtValue} - overriding values`);\n\n                if (customApp.thresholdLtIcon) {\n                    moreOptions.icon = customApp.thresholdLtIcon;\n                }\n                if (customApp.thresholdLtTextColor) {\n                    moreOptions.color = customApp.thresholdLtTextColor;\n                    moreOptions.rainbow = false; // disable rainbow\n                }\n                if (customApp.thresholdLtBackgroundColor) {\n                    moreOptions.background = customApp.thresholdLtBackgroundColor;\n\n                    if (customApp.useBackgroundEffect) {\n                        delete moreOptions.effect;\n                    }\n                }\n            } else if (customApp.thresholdGtActive && val > customApp.thresholdGtValue) {\n                this.log.debug(`[createAppRequestObj] GT > custom app \"${customApp.name}\" has a value (${val}) greater than ${customApp.thresholdGtValue} - overriding values`);\n\n                if (customApp.thresholdGtIcon) {\n                    moreOptions.icon = customApp.thresholdGtIcon;\n                }\n                if (customApp.thresholdGtTextColor) {\n                    moreOptions.color = customApp.thresholdGtTextColor;\n                    moreOptions.rainbow = false; // disable rainbow\n                }\n                if (customApp.thresholdGtBackgroundColor) {\n                    moreOptions.background = customApp.thresholdGtBackgroundColor;\n\n                    if (customApp.useBackgroundEffect) {\n                        delete moreOptions.effect;\n                    }\n                }\n            }\n        }\n\n        return {\n            text,\n            textCase: 2, // show as sent\n            pos: customApp.position,\n            ...moreOptions,\n        };\n    }\n\n    private async initHistoryApps(): Promise<void> {\n        if (this.apiConnected && this.config.historyApps.length > 0) {\n            const validSourceInstances: Array<string> = [];\n\n            // Check for valid history instances (once)\n            for (const historyApp of this.config.historyApps) {\n                if (historyApp.sourceInstance && !validSourceInstances.includes(historyApp.sourceInstance)) {\n                    const sourceInstanceObj = await this.getForeignObjectAsync(`system.adapter.${historyApp.sourceInstance}`);\n\n                    if (sourceInstanceObj && sourceInstanceObj.common?.getHistory) {\n                        const sourceInstanceAliveState = await this.getForeignStateAsync(`system.adapter.${historyApp.sourceInstance}.alive`);\n\n                        if (sourceInstanceAliveState && sourceInstanceAliveState.val) {\n                            this.log.debug(`[initHistoryApps] Found valid source instance for history data: ${historyApp.sourceInstance}`);\n\n                            validSourceInstances.push(historyApp.sourceInstance);\n                        } else {\n                            this.log.warn(`[initHistoryApps] Unable to get history data of \"${historyApp.sourceInstance}\": instance not running (stopped)`);\n                        }\n                    } else {\n                        this.log.warn(`[initHistoryApps] Unable to get history data of \"${historyApp.sourceInstance}\": no valid source for getHistory()`);\n                    }\n                }\n            }\n\n            for (const historyApp of this.config.historyApps) {\n                if (historyApp.name) {\n                    if (historyApp.objId && historyApp.sourceInstance) {\n                        this.log.debug(`[initHistoryApps] getting history data for app \"${historyApp.name}\" of \"${historyApp.objId}\" from ${historyApp.sourceInstance}`);\n\n                        try {\n                            const appVisibleState = await this.getStateAsync(`apps.${historyApp.name}.visible`);\n                            const appVisible = appVisibleState ? appVisibleState.val : true;\n\n                            // Ack if changed while instance was stopped\n                            if (appVisibleState && !appVisibleState?.ack) {\n                                await this.setStateAsync(`apps.${historyApp.name}.visible`, { val: appVisible, ack: true, c: 'initHistoryApps' });\n                            }\n\n                            if (!appVisible) {\n                                this.log.debug(`[initHistoryApps] Going to remove history app \"${historyApp.name}\" (was hidden by state: apps.${historyApp.name}.visible)`);\n\n                                await this.removeApp(historyApp.name).catch((error) => {\n                                    this.log.warn(`Unable to remove history app \"${historyApp.name}\" (hidden by state): ${error}`);\n                                });\n                            } else if (validSourceInstances.includes(historyApp.sourceInstance)) {\n                                const sourceObj = await this.getForeignObjectAsync(historyApp.objId);\n\n                                if (sourceObj && Object.prototype.hasOwnProperty.call(sourceObj?.common?.custom ?? {}, historyApp.sourceInstance)) {\n                                    const itemCount = historyApp.icon ? 11 : 16; // Can display 11 values with icon or 16 values without icon\n\n                                    const historyData = await this.sendToAsync(historyApp.sourceInstance, 'getHistory', {\n                                        id: historyApp.objId,\n                                        options: {\n                                            start: 1,\n                                            end: Date.now(),\n                                            aggregate: 'none',\n                                            limit: itemCount,\n                                            returnNewestEntries: true,\n                                            ignoreNull: 0,\n                                            removeBorderValues: true,\n                                            ack: true,\n                                        },\n                                    });\n                                    const lineData = (historyData as any)?.result\n                                        .filter((state: ioBroker.State) => typeof state.val === 'number' && state.ack)\n                                        .map((state: ioBroker.State) => Math.round(state.val as number))\n                                        .slice(itemCount * -1);\n\n                                    this.log.debug(\n                                        `[initHistoryApps] History data for app \"${historyApp.name}\" of \"${historyApp.objId}: ${JSON.stringify(historyData)} - filtered: ${JSON.stringify(lineData)}`,\n                                    );\n\n                                    if (lineData.length > 0) {\n                                        const moreOptions: Awtrix.App = {};\n\n                                        // Duration\n                                        if (historyApp.duration > 0) {\n                                            moreOptions.duration = historyApp.duration;\n                                        }\n\n                                        // Repeat\n                                        if (historyApp.repeat > 0) {\n                                            moreOptions.repeat = historyApp.repeat;\n                                        }\n\n                                        await this.buildAppRequestAsync(historyApp.name, {\n                                            color: historyApp.lineColor || '#FF0000',\n                                            background: historyApp.backgroundColor || '#000000',\n                                            line: lineData,\n                                            autoscale: true,\n                                            icon: historyApp.icon,\n                                            lifetime: this.config.historyAppsRefreshInterval + 60, // Remove app if there is no update in configured interval (+ buffer)\n                                            pos: historyApp.position,\n                                            ...moreOptions,\n                                        }).catch((error) => {\n                                            this.log.warn(`(custom?name=${historyApp.name}) Unable to create history app \"${historyApp.name}\": ${error}`);\n                                        });\n                                    } else {\n                                        this.log.debug(`[initHistoryApps] Going to remove history app \"${historyApp.name}\" (no history data)`);\n\n                                        await this.removeApp(historyApp.name).catch((error) => {\n                                            this.log.warn(`Unable to remove history app \"${historyApp.name}\" (no history data): ${error}`);\n                                        });\n                                    }\n                                } else {\n                                    this.log.info(`[initHistoryApps] Unable to get history data for app \"${historyApp.name}\" of \"${historyApp.objId}\": logging is not configured for this object`);\n                                }\n                            } else {\n                                this.log.info(`[initHistoryApps] Unable to get history data for app \"${historyApp.name}\" of \"${historyApp.objId}\": source invalid or unavailable`);\n                            }\n                        } catch (error) {\n                            this.log.error(`[initHistoryApps] Unable to get history data for app \"${historyApp.name}\" of \"${historyApp.objId}\": ${error}`);\n                        }\n                    }\n                } else {\n                    this.log.warn(`[initHistoryApps] Found history app without name (skipped) - please check instance configuartion`);\n                }\n            }\n        }\n\n        if (this.config.historyApps.length > 0) {\n            this.log.debug(`re-creating history apps timeout (${this.config.historyAppsRefreshInterval ?? 300} seconds)`);\n            this.refreshHistoryAppsTimeout =\n                this.refreshHistoryAppsTimeout ||\n                this.setTimeout(\n                    () => {\n                        this.refreshHistoryAppsTimeout = null;\n                        this.initHistoryApps();\n                    },\n                    this.config.historyAppsRefreshInterval * 1000 || 300 * 1000,\n                );\n        }\n    }\n\n    private async initExpertApps(): Promise<void> {}\n\n    private async createAppObjects(): Promise<number> {\n        return new Promise<number>((resolve, reject) => {\n            if (this.apiConnected) {\n                this.buildRequestAsync('apps', 'GET')\n                    .then(async (response) => {\n                        if (response.status === 200) {\n                            const content = response.data as Array<{ name: string; }>;\n\n                            const appPath = 'apps';\n                            const customApps = this.config.customApps.map((a) => a.name);\n                            const historyApps = this.config.historyApps.map((a) => a.name);\n                            const expertApps = this.config.expertApps.map((a) => a.name);\n                            const existingApps = content.map((a) => a.name);\n                            const allApps = [...NATIVE_APPS, ...customApps, ...historyApps, ...expertApps];\n\n                            this.log.debug(`[createAppObjects] existing apps on awtrix light: ${JSON.stringify(existingApps)}`);\n\n                            const appsAll = [];\n                            const appsKeep = [];\n\n                            // Collect all existing apps from objects\n                            const existingChannels = await this.getChannelsOfAsync(appPath);\n                            if (existingChannels) {\n                                for (const existingChannel of existingChannels) {\n                                    const id = this.removeNamespace(existingChannel._id);\n\n                                    // Check if the state is a direct child (e.g. apps.temp)\n                                    if (id.split('.').length === 2) {\n                                        appsAll.push(id);\n                                    }\n                                }\n                            }\n\n                            // Create new app structure for all native apps and apps of instance configuration\n                            for (const name of allApps) {\n                                appsKeep.push(`${appPath}.${name}`);\n                                this.log.debug(`[createAppObjects] found (keep): ${appPath}.${name}`);\n\n                                const isCustomApp = customApps.includes(name);\n                                const isHistoryApp = historyApps.includes(name);\n                                const isExpertApp = expertApps.includes(name);\n\n                                await this.extendObjectAsync(`${appPath}.${name}`, {\n                                    type: 'channel',\n                                    common: {\n                                        name: `App`,\n                                        desc: `${name}${isCustomApp ? ' (custom app)' : ''}${isHistoryApp ? ' (history app)' : ''}${isExpertApp ? ' (expert app)' : ''}`,\n                                    },\n                                    native: {\n                                        isNativeApp: NATIVE_APPS.includes(name),\n                                        isCustomApp,\n                                        isHistoryApp,\n                                        isExpertApp,\n                                    },\n                                });\n\n                                await this.setObjectNotExistsAsync(`${appPath}.${name}.activate`, {\n                                    type: 'state',\n                                    common: {\n                                        name: {\n                                            en: 'Activate',\n                                            de: 'Aktivieren',\n                                            ru: '\u0410\u043A\u0442\u0438\u0432\u0438\u0440\u043E\u0432\u0430\u0442\u044C',\n                                            pt: 'Ativar',\n                                            nl: 'Activeren',\n                                            fr: 'Activer',\n                                            it: 'Attivare',\n                                            es: 'Activar',\n                                            pl: 'Aktywuj',\n                                            //uk: '\u0410\u043A\u0442\u0438\u0432\u0443\u0432\u0430\u0442\u0438',\n                                            'zh-cn': '\u542F\u7528',\n                                        },\n                                        type: 'boolean',\n                                        role: 'button',\n                                        read: false,\n                                        write: true,\n                                    },\n                                    native: {\n                                        name,\n                                    },\n                                });\n\n                                // \"Own\" apps can be hidden via state\n                                if (isCustomApp || isHistoryApp || isExpertApp) {\n                                    await this.setObjectNotExistsAsync(`${appPath}.${name}.visible`, {\n                                        type: 'state',\n                                        common: {\n                                            name: {\n                                                en: 'Visible',\n                                                de: 'Sichtbar',\n                                                ru: '\u0412\u0438\u0434\u0438\u043C\u044B\u0439',\n                                                pt: 'Vis\u00EDvel',\n                                                nl: 'Vertaling:',\n                                                fr: 'Visible',\n                                                it: 'Visibile',\n                                                es: 'Visible',\n                                                pl: 'Widoczny',\n                                                //uk: '\u0412\u0438\u0431\u0440\u0430\u043D\u0456',\n                                                'zh-cn': '\u4E0D\u53EF\u6297\u8FA9',\n                                            },\n                                            type: 'boolean',\n                                            role: 'switch.enable',\n                                            read: true,\n                                            write: true,\n                                            def: true,\n                                        },\n                                        native: {\n                                            name,\n                                        },\n                                    });\n\n                                    if (isExpertApp) {\n                                        await this.setObjectNotExistsAsync(`${appPath}.${name}.text`, {\n                                            type: 'state',\n                                            common: {\n                                                name: {\n                                                    en: 'Text',\n                                                    de: 'Text',\n                                                    ru: '\u0422\u0435\u043A\u0441\u0442',\n                                                    pt: 'Texto',\n                                                    nl: 'Text',\n                                                    fr: 'Texte',\n                                                    it: 'Testo',\n                                                    es: 'Texto',\n                                                    pl: 'Tekst',\n                                                    //uk: '\u0413\u043E\u043B\u043E\u0432\u043D\u0430',\n                                                    'zh-cn': '\u6848\u6587',\n                                                },\n                                                type: 'string',\n                                                role: 'text',\n                                                read: true,\n                                                write: true,\n                                            },\n                                            native: {\n                                                name,\n                                            },\n                                        });\n                                    }\n                                }\n                            }\n\n                            // Delete non existent apps\n                            for (const app of appsAll) {\n                                if (!appsKeep.includes(app)) {\n                                    await this.delObjectAsync(app, { recursive: true });\n                                    this.log.debug(`[createAppObjects] deleted: ${app}`);\n                                }\n                            }\n\n                            if (this.config.autoDeleteForeignApps) {\n                                // Delete unknown apps on awtrix light\n                                for (const name of existingApps.filter((a) => !allApps.includes(a))) {\n                                    this.log.info(`[createAppObjects] Deleting unknown app on awtrix light with name \"${name}\"`);\n\n                                    try {\n                                        await this.removeApp(name).catch((error) => {\n                                            this.log.warn(`Unable to remove unknown app \"${name}\": ${error}`);\n                                        });\n                                    } catch (error) {\n                                        this.log.error(`[createAppObjects] Unable to delete unknown app ${name}: ${error}`);\n                                    }\n                                }\n                            }\n\n                            resolve(appsKeep.length);\n                        } else {\n                            this.log.warn(`[createAppObjects] received status code: ${response.status}`);\n\n                            reject(`received status code: ${response.status}`);\n                        }\n                    })\n                    .catch((error) => {\n                        this.log.debug(`[createAppObjects] received error: ${JSON.stringify(error)}`);\n\n                        reject(error);\n                    });\n            }\n        });\n    }\n\n    private async updateIndicatorByStates(index: number): Promise<AxiosResponse> {\n        this.log.debug(`Updating indicator with index ${index}`);\n\n        const indicatorStates = await this.getStatesAsync(`indicator.${index}.*`);\n        const indicatorValues: { [key: string]: ioBroker.StateValue } = Object.entries(indicatorStates).reduce(\n            (acc, [objId, state]) => ({\n                ...acc,\n                [this.removeNamespace(objId)]: state.val,\n            }),\n            {},\n        );\n\n        const postObj: Awtrix.Indicator = {\n            color: indicatorValues[`indicator.${index}.color`] as string,\n        };\n\n        if (postObj.color !== '0') {\n            const blink = indicatorValues[`indicator.${index}.blink`] as number;\n            if (blink > 0) {\n                postObj.blink = blink;\n            }\n        }\n\n        return this.buildRequestAsync(`indicator${index}`, 'POST', indicatorValues[`indicator.${index}.active`] ? postObj : undefined);\n    }\n\n    private async updateMoodlightByStates(): Promise<AxiosResponse> {\n        this.log.debug(`Updating moodlight`);\n\n        const moodlightStates = await this.getStatesAsync('display.moodlight.*');\n        const moodlightValues: { [key: string]: ioBroker.StateValue } = Object.entries(moodlightStates).reduce(\n            (acc, [objId, state]) => ({\n                ...acc,\n                [this.removeNamespace(objId)]: state.val,\n            }),\n            {},\n        );\n\n        const postObj: Awtrix.Moodlight = {\n            brightness: moodlightValues['display.moodlight.brightness'] as number,\n            color: String(moodlightValues['display.moodlight.color']).toUpperCase(),\n        };\n\n        return this.buildRequestAsync('moodlight', 'POST', moodlightValues['display.moodlight.active'] ? postObj : undefined);\n    }\n\n    private async buildAppRequestAsync(name: string, data?: Awtrix.App): Promise<AxiosResponse> {\n        return this.buildRequestAsync(`custom?name=${name}`, 'POST', data);\n    }\n\n    private async buildRequestAsync(service: string, method?: string, data?: object): Promise<AxiosResponse> {\n        return new Promise<AxiosResponse>((resolve, reject) => {\n            const url = `/api/${service}`;\n            const timeout = this.config.httpTimeout * 1000 || 3000;\n\n            if (this.config.awtrixIp) {\n                if (data) {\n                    this.log.debug(`sending \"${method}\" request to \"${url}\" with data: ${JSON.stringify(data)}`);\n                } else {\n                    this.log.debug(`sending \"${method}\" request to \"${url}\" without data`);\n                }\n\n                axios({\n                    method,\n                    data,\n                    baseURL: `http://${this.config.awtrixIp}:80`,\n                    url,\n                    timeout,\n                    auth: {\n                        username: this.config.userName,\n                        password: this.config.userPassword,\n                    },\n                    validateStatus: (status) => {\n                        return [200, 201].indexOf(status) > -1;\n                    },\n                    responseType: 'json',\n                })\n                    .then((response) => {\n                        this.log.debug(`received ${response.status} response from \"${url}\" with content: ${JSON.stringify(response.data)}`);\n\n                        // no error - clear up reminder\n                        this.lastErrorCode = -1;\n\n                        resolve(response);\n                    })\n                    .catch((error) => {\n                        if (error.response) {\n                            // The request was made and the server responded with a status code\n\n                            if (error.response.status === 401) {\n                                this.log.warn('Unable to perform request. Looks like the device is protected with username / password. Check instance configuration!');\n                            } else {\n                                this.log.warn(`received ${error.response.status} response from ${url} with content: ${JSON.stringify(error.response.data)}`);\n                            }\n                        } else if (error.request) {\n                            // The request was made but no response was received\n                            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                            // http.ClientRequest in node.js\n\n                            // avoid spamming of the same error when stuck in a reconnection loop\n                            if (error.code === this.lastErrorCode) {\n                                this.log.debug(error.message);\n                            } else {\n                                this.log.info(`error ${error.code} from ${url}: ${error.message}`);\n                                this.lastErrorCode = error.code;\n                            }\n                        } else {\n                            // Something happened in setting up the request that triggered an Error\n                            this.log.error(error.message);\n                        }\n\n                        reject(error);\n                    });\n            } else {\n                reject('Device IP is not configured');\n            }\n        });\n    }\n\n    private removeNamespace(id: string): string {\n        const re = new RegExp(this.namespace + '*\\\\.', 'g');\n        return id.replace(re, '');\n    }\n\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            if (this.config.removeAppsOnStop) {\n                const customApps = this.config.customApps.map((a) => a.name);\n                const historyApps = this.config.historyApps.map((a) => a.name);\n\n                // Delete unknown apps on awtrix light\n                for (const name of [...customApps, ...historyApps]) {\n                    this.log.info(`[onUnload] Deleting app on awtrix light with name \"${name}\"`);\n\n                    try {\n                        await this.removeApp(name).catch((error) => {\n                            this.log.warn(`Unable to remove unknown app \"${name}\": ${error}`);\n                        });\n                    } catch (error) {\n                        this.log.error(`[onUnload] Unable to delete app ${name}: ${error}`);\n                    }\n                }\n            }\n\n            await this.setApiConnected(false);\n\n            if (this.refreshStateTimeout) {\n                this.log.debug('clearing refresh state timeout');\n                this.clearTimeout(this.refreshStateTimeout);\n            }\n\n            if (this.refreshHistoryAppsTimeout) {\n                this.log.debug('clearing history apps timeout');\n                this.clearTimeout(this.refreshHistoryAppsTimeout);\n            }\n\n            if (this.downloadScreenContentInterval) {\n                this.clearInterval(this.downloadScreenContentInterval);\n                this.downloadScreenContentInterval = null;\n            }\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    private isNewerVersion(oldVer: string, newVer: string): boolean {\n        const oldParts = oldVer.split('.');\n        const newParts = newVer.split('.');\n        for (let i = 0; i < newParts.length; i++) {\n            const a = ~~newParts[i]; // parse int\n            const b = ~~oldParts[i]; // parse int\n            if (a > b) return true;\n            if (a < b) return false;\n        }\n        return false;\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new AwtrixLight(options);\n} else {\n    // otherwise start the instance directly\n    (() => new AwtrixLight())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAIA,YAAuB;AAEvB,mBAAqC;AAErC,2BAAkD;AAElD,MAAM,cAAc,CAAC,QAAQ,QAAQ,QAAQ,OAAO,KAAK;AA+CzD,MAAM,oBAAoB,MAAM,QAAQ;AAAA,EAe7B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,MACN,eAAe;AAAA,IACnB,CAAC;AAED,SAAK,mBAAmB;AACxB,SAAK,0BAA0B;AAE/B,SAAK,eAAe;AAEpB,SAAK,sBAAsB;AAC3B,SAAK,4BAA4B;AACjC,SAAK,gCAAgC;AAErC,SAAK,0BAA0B,CAAC;AAEhC,SAAK,oBAAoB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,SAAK,gBAAgB;AAErB,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,gBAAgB,KAAK,eAAe,KAAK,IAAI,CAAC;AACtD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAEA,MAAc,UAAyB;AACnC,SAAK,gBAAgB,KAAK;AAE1B,UAAM,KAAK,2BAA2B;AACtC,UAAM,KAAK,qBAAqB,GAAG;AAEnC,QAAI,CAAC,KAAK,OAAO,UAAU;AACvB,WAAK,IAAI,MAAM,6EAA6E;AAC5F;AAAA,IACJ,OAAO;AACH,WAAK,IAAI,KAAK,mCAAmC,KAAK,OAAO,WAAW;AAAA,IAC5E;AAEA,QAAI,KAAK,OAAO,2BAA2B,KAAK,OAAO,4BAA4B,KAAK,WAAW;AAC/F,YAAM,KAAK,6BAA6B,kBAAkB,KAAK,OAAO,yBAAyB;AAC/F,YAAM,KAAK,sBAAsB;AAAA,IACrC;AAGA,QAAI,CAAC,KAAK,OAAO,iBAAiB;AAC9B,WAAK,IAAI,MAAM,6GAA6G;AAE5H,UAAI,MAAM;AACV,iBAAW,aAAa,KAAK,OAAO,YAAY;AAC5C,kBAAU,WAAW;AAAA,MACzB;AAEA,iBAAW,cAAc,KAAK,OAAO,aAAa;AAC9C,mBAAW,WAAW;AAAA,MAC1B;AAEA,iBAAW,aAAa,KAAK,OAAO,YAAY;AAC5C,kBAAU,WAAW;AAAA,MACzB;AAAA,IACJ,OAAO;AACH,WAAK,IAAI,MAAM,wFAAwF;AAAA,IAC3G;AAEA,SAAK,aAAa;AAAA,EACtB;AAAA,EAEA,MAAc,6BAA4C;AACtD,SAAK,IAAI,MAAM,yCAAyC;AAExD,UAAM,KAAK,eAAe,aAAa,EAAE,WAAW,KAAK,CAAC;AAAA,EAC9D;AAAA,EAEA,MAAc,wBAAuC;AAxKzD;AAyKQ,QAAI;AACA,WAAK,IAAI,KAAK,qCAAqC,KAAK,OAAO,yBAAyB;AAExF,YAAM,cAAc,MAAM,KAAK,sBAAsB,kBAAkB,KAAK,OAAO,yBAAyB;AAE5G,UAAI,eAAe,YAAY,QAAQ;AACnC,YAAI,GAAC,iBAAY,WAAZ,mBAAoB,0BAAyB;AAC9C,eAAK,OAAO,aAAa,YAAY,OAAO;AAC5C,eAAK,OAAO,kCAAkC,YAAY,OAAO;AACjE,eAAK,OAAO,cAAc,YAAY,OAAO;AAC7C,eAAK,OAAO,6BAA6B,YAAY,OAAO;AAC5D,eAAK,OAAO,wBAAwB,YAAY,OAAO;AACvD,eAAK,OAAO,mBAAmB,YAAY,OAAO;AAClD,eAAK,OAAO,aAAa,YAAY,OAAO;AAE5C,eAAK,IAAI,MAAM,iFAAiF,KAAK,OAAO,0BAA0B;AAAA,QAC1I,OAAO;AACH,gBAAM,IAAI,MAAM,+CAA8C,gDAAa,WAAb,mBAAqB,8CAA8C;AAAA,QACrI;AAAA,MACJ,OAAO;AACH,cAAM,IAAI,MAAM,wCAAuC,gDAAa,WAAb,mBAAqB,4CAA4C;AAAA,MAC5H;AAAA,IACJ,SAAS,KAAP;AACE,WAAK,IAAI,MAAM,gDAAgD,KAAK;AAAA,IACxE;AAAA,EACJ;AAAA,EAEA,MAAc,cAAc,IAAY,OAAyD;AApMrG;AAqMQ,QAAI,MAAM,SAAS,OAAO,UAAU,eAAe,KAAK,KAAK,yBAAyB,EAAE,GAAG;AACvF,UAAI,MAAM,KAAK;AAEX,YAAI,MAAM,QAAQ,KAAK,wBAAwB,IAAI,KAAK;AACpD,eAAK,IAAI,MAAM,mDAAmD,YAAY,KAAK,wBAAwB,IAAI,UAAU,MAAM,YAAY,MAAM,KAAK;AAEtJ,cAAI,KAAK,wBAAwB,IAAI,KAAK,KAAK,OAAO,kCAAkC,MAAO,MAAM,IAAI;AACrG,iBAAK,wBAAwB,IAAI,MAAM,KAAK,wBAAwB,IAAI,SAAS,UAAU,OAAO,MAAM,GAAG,IAAI,MAAM;AACrH,iBAAK,wBAAwB,IAAI,KAAK,MAAM;AAE5C,iBAAK,kBAAkB,EAAE;AAAA,UAC7B,OAAO;AACH,iBAAK,IAAI;AAAA,cACL,8DAA8D,UAAU,MAAM,oCAC1E,KAAK,OAAO,2DACY,KAAK,WAAW,KAAK,wBAAwB,IAAI,IAAI,yBAAyB;AAAA,YAC9G;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OAAO;AACH,aAAK,IAAI,MAAM,wDAAwD,UAAU,MAAM,oBAAoB;AAAA,MAC/G;AAAA,IACJ;AAEA,QAAI,MAAM,SAAS,CAAC,MAAM,KAAK;AAC3B,YAAM,gBAAgB,KAAK,gBAAgB,EAAE;AAE7C,WAAK,IAAI,MAAM,SAAS,0BAA0B,MAAM,KAAK;AAE7D,UAAI,KAAK,cAAc;AACnB,YAAI,cAAc,WAAW,WAAW,GAAG;AACvC,eAAK,IAAI,MAAM,oBAAoB,0BAA0B,MAAM,KAAK;AAExE,gBAAM,cAAc,MAAM,KAAK,eAAe,aAAa;AAC3D,cAAI,iBAAe,iBAAY,WAAZ,mBAAoB,cAAa;AAChD,iBAAK,kBAAkB,YAAY,QAAQ,EAAE,CAAC,YAAY,OAAO,cAAc,MAAM,IAAI,CAAC,EACrF,KAAK,OAAO,aAAa;AACtB,kBAAI,SAAS,WAAW,OAAO,SAAS,SAAS,MAAM;AACnD,sBAAM,KAAK,cAAc,eAAe,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,cACzE;AAEA,oBAAM,KAAK,gBAAgB;AAAA,YAC/B,CAAC,EACA,MAAM,CAAC,UAAU;AACd,mBAAK,IAAI,KAAK,wCAAwC,OAAO;AAAA,YACjE,CAAC;AAAA,UACT,OAAO;AACH,iBAAK,IAAI,KAAK,+BAA+B,4BAA4B;AAAA,UAC7E;AAAA,QACJ,WAAW,kBAAkB,iBAAiB;AAC1C,eAAK,IAAI,MAAM,6BAA6B,MAAM,KAAK;AAEvD,eAAK,kBAAkB,SAAS,QAAQ,EAAE,OAAO,MAAM,IAAI,CAAC,EACvD,KAAK,OAAO,aAAa;AACtB,gBAAI,SAAS,WAAW,OAAO,SAAS,SAAS,MAAM;AACnD,oBAAM,KAAK,cAAc,eAAe,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,YACzE;AAAA,UACJ,CAAC,EACA,MAAM,CAAC,UAAU;AACd,iBAAK,IAAI,KAAK,qCAAqC,OAAO;AAAA,UAC9D,CAAC;AAAA,QACT,WAAW,cAAc,WAAW,oBAAoB,GAAG;AACvD,eAAK,wBAAwB,EACxB,KAAK,OAAO,aAAa;AACtB,gBAAI,SAAS,WAAW,OAAO,SAAS,SAAS,MAAM;AACnD,oBAAM,KAAK,cAAc,eAAe,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,YACzE;AAAA,UACJ,CAAC,EACA,MAAM,CAAC,UAAU;AACd,iBAAK,IAAI,KAAK,yCAAyC,OAAO;AAAA,UAClE,CAAC;AAAA,QACT,WAAW,kBAAkB,iBAAiB;AAC1C,eAAK,IAAI,KAAK,4BAA4B;AAE1C,eAAK,kBAAkB,YAAY,MAAM,EACpC,KAAK,OAAO,aAAa;AACtB,gBAAI,SAAS,WAAW,OAAO,SAAS,SAAS,MAAM;AACnD,mBAAK,IAAI,KAAK,yBAAyB;AAAA,YAC3C;AAAA,UACJ,CAAC,EACA,MAAM,CAAC,UAAU;AACd,iBAAK,IAAI,KAAK,4FAA4F,OAAO;AAAA,UACrH,CAAC;AAAA,QACT,WAAW,kBAAkB,iBAAiB;AAC1C,eAAK,kBAAkB,UAAU,MAAM,EAClC,KAAK,OAAO,aAAa;AACtB,gBAAI,SAAS,WAAW,OAAO,SAAS,SAAS,MAAM;AACnD,mBAAK,IAAI,KAAK,kBAAkB;AAChC,mBAAK,gBAAgB,KAAK;AAAA,YAC9B;AAAA,UACJ,CAAC,EACA,MAAM,CAAC,UAAU;AACd,iBAAK,IAAI,KAAK,sCAAsC,OAAO;AAAA,UAC/D,CAAC;AAAA,QACT,WAAW,kBAAkB,aAAa;AACtC,eAAK,IAAI,MAAM,uBAAuB;AAEtC,eAAK,kBAAkB,WAAW,MAAM,EAAE,MAAM,CAAC,UAAU;AACvD,iBAAK,IAAI,KAAK,uCAAuC,OAAO;AAAA,UAChE,CAAC;AAAA,QACL,WAAW,kBAAkB,aAAa;AACtC,eAAK,IAAI,MAAM,2BAA2B;AAE1C,eAAK,kBAAkB,eAAe,MAAM,EAAE,MAAM,CAAC,UAAU;AAC3D,iBAAK,IAAI,KAAK,2CAA2C,OAAO;AAAA,UACpE,CAAC;AAAA,QACL,WAAW,cAAc,WAAW,OAAO,GAAG;AAC1C,cAAI,cAAc,SAAS,WAAW,GAAG;AACrC,gBAAI,MAAM,KAAK;AACX,oBAAM,YAAY,MAAM,KAAK,eAAe,aAAa;AACzD,kBAAI,eAAa,eAAU,WAAV,mBAAkB,OAAM;AACrC,qBAAK,IAAI,MAAM,kBAAkB,UAAU,OAAO,MAAM;AAExD,qBAAK,kBAAkB,UAAU,QAAQ,EAAE,MAAM,UAAU,OAAO,KAAK,CAAC,EAAE,MAAM,CAAC,UAAU;AACvF,uBAAK,IAAI,KAAK,sCAAsC,OAAO;AAAA,gBAC/D,CAAC;AAAA,cACL;AAAA,YACJ,OAAO;AACH,mBAAK,IAAI,KAAK,oCAAoC,eAAe;AAAA,YACrE;AAAA,UACJ,WAAW,cAAc,SAAS,UAAU,GAAG;AAC3C,kBAAM,YAAY,MAAM,KAAK,eAAe,aAAa;AACzD,gBAAI,eAAa,eAAU,WAAV,mBAAkB,OAAM;AACrC,mBAAK,IAAI,MAAM,8BAA8B,UAAU,OAAO,WAAW,MAAM,KAAK;AAEpF,oBAAM,KAAK,cAAc,eAAe,EAAE,KAAK,MAAM,KAAK,KAAK,MAAM,GAAG,gBAAgB,CAAC;AAGzF,oBAAM,KAAK,YAAY;AAAA,YAC3B;AAAA,UACJ,OAAO;AAEH,kBAAM,KAAK,eAAe;AAAA,UAC9B;AAAA,QACJ,WAAW,cAAc,MAAM,2BAA2B,GAAG;AACzD,gBAAM,UAAU,cAAc,MAAM,8BAA8B;AAClE,gBAAM,cAAc,UAAU,SAAS,QAAQ,EAAE,IAAI;AACrD,gBAAM,SAAS,UAAU,QAAQ,KAAK;AAEtC,eAAK,IAAI,MAAM,qBAAqB,2BAA2B,QAAQ;AAEvE,cAAI,eAAe,eAAe,GAAG;AACjC,iBAAK,wBAAwB,WAAW,EACnC,KAAK,OAAO,aAAa;AACtB,kBAAI,SAAS,WAAW,OAAO,SAAS,SAAS,MAAM;AACnD,sBAAM,KAAK,cAAc,eAAe,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,cACzE;AAAA,YACJ,CAAC,EACA,MAAM,CAAC,UAAU;AACd,mBAAK,IAAI,KAAK,yCAAyC,OAAO;AAAA,YAClE,CAAC;AAAA,UACT;AAAA,QACJ;AAAA,MACJ,OAAO;AACH,aAAK,IAAI,KAAK,gCAAgC,8DAA8D;AAAA,MAChH;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,eAAe,IAAY,KAAwD;AApWrG;AAsWQ,QAAI,MAAM,MAAM,kBAAkB,KAAK,OAAO,2BAA2B;AACrE,YAAM,KAAK,sBAAsB;AAGjC,UAAI,KAAK,cAAc;AACnB,cAAM,KAAK,iBAAiB;AAC5B,cAAM,KAAK,YAAY;AAAA,MAC3B;AAAA,IACJ;AAEA,QAAI,MAAM,OAAO,UAAU,eAAe,KAAK,KAAK,yBAAyB,EAAE,GAAG;AAC9E,UAAI,CAAC,KAAK;AACN,eAAO,KAAK,wBAAwB;AAAA,MACxC,OAAO;AACH,aAAK,wBAAwB,IAAI,OAAO,2BAAK,OAAO;AACpD,aAAK,wBAAwB,IAAI,QAAO,gCAAK,WAAL,mBAAa;AAErD,aAAK,kBAAkB,EAAE;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,UAAU,KAA6B;AAC3C,SAAK,IAAI,MAAM,iCAAiC,IAAI,0BAA0B,KAAK,UAAU,IAAI,OAAO,GAAG;AAE3G,QAAI,OAAO,IAAI,SAAS;AACpB,UAAI,IAAI,YAAY,wBAAwB;AACxC,aAAK;AAAA,UACD,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,KAAK,kBAAkB,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,OAAO,EAAE,EAAE;AAAA,UAC1D,IAAI;AAAA,QACR;AAAA,MACJ,WAAW,IAAI,YAAY,kBAAkB,OAAO,IAAI,YAAY,UAAU;AAE1E,YAAI,KAAK,cAAc;AACnB,gBAAM,cAA0B,OAAO,YAAY,OAAO,QAAQ,IAAI,OAAO,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,MAAM,IAAI,CAAC;AAG7G,cAAI,YAAY,WAAW,UAAa,YAAY,UAAU,GAAG;AAC7D,mBAAO,YAAY;AAAA,UACvB;AAGA,cAAI,YAAY,aAAa,UAAa,YAAY,YAAY,GAAG;AACjE,mBAAO,YAAY;AAAA,UACvB;AAEA,eAAK,kBAAkB,UAAU,QAAQ,WAAW,EAC/C,KAAK,CAAC,aAAa;AAChB,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,OAAO,MAAM,MAAM,SAAS,KAAK,GAAG,IAAI,QAAQ;AAAA,UACzF,CAAC,EACA,MAAM,CAAC,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,MAAM,GAAG,IAAI,QAAQ;AAAA,UAC9D,CAAC;AAAA,QACT,OAAO;AACH,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,OAAO,0CAA0C,GAAG,IAAI,QAAQ;AAAA,QACzG;AAAA,MACJ,WAAW,IAAI,YAAY,WAAW,OAAO,IAAI,YAAY,UAAU;AAEnE,YAAI,KAAK,cAAc;AACnB,gBAAM,cAAc,OAAO,YAAY,OAAO,QAAQ,IAAI,OAAO,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,MAAM,IAAI,CAAC;AAEjG,eAAK,kBAAkB,SAAS,QAAQ,WAAW,EAC9C,KAAK,CAAC,aAAa;AAChB,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,OAAO,MAAM,MAAM,SAAS,KAAK,GAAG,IAAI,QAAQ;AAAA,UACzF,CAAC,EACA,MAAM,CAAC,UAAU;AACd,iBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,MAAM,GAAG,IAAI,QAAQ;AAAA,UAC9D,CAAC;AAAA,QACT,OAAO;AACH,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,OAAO,0CAA0C,GAAG,IAAI,QAAQ;AAAA,QACzG;AAAA,MACJ,OAAO;AACH,aAAK,IAAI,MAAM,sDAAsD;AAErE,YAAI,IAAI,UAAU;AACd,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,OAAO,qBAAqB,GAAG,IAAI,QAAQ;AAAA,QACpF;AAAA,MACJ;AAAA,IACJ,WAAW,IAAI,UAAU;AACrB,WAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,OAAO,kBAAkB,GAAG,IAAI,QAAQ;AAAA,IACjF;AAAA,EACJ;AAAA,EAEA,MAAc,gBAAgB,YAAoC;AAC9D,QAAI,eAAe,KAAK,cAAc;AAClC,YAAM,KAAK,qBAAqB,mBAAmB,EAAE,KAAK,YAAY,KAAK,KAAK,CAAC;AACjF,WAAK,eAAe;AAEpB,UAAI,YAAY;AAEZ,aAAK,IAAI,MAAM,eAAe;AAE9B,YAAI;AAEA,gBAAM,KAAK,gBAAgB;AAC3B,gBAAM,KAAK,yBAAyB;AACpC,gBAAM,KAAK,mBAAmB;AAG9B,gBAAM,KAAK,iBAAiB;AAC5B,gBAAM,KAAK,YAAY;AAGvB,gBAAM,KAAK,4BAA4B,OAAO,KAAK,KAAK,uBAAuB,CAAC;AAGhF,mBAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AACzB,kBAAM,KAAK,wBAAwB,CAAC;AAAA,UACxC;AAGA,gBAAM,KAAK,wBAAwB;AAGnC,eAAK,kBAAkB,UAAU,QAAQ;AAAA,YACrC,UAAU;AAAA,YACV,MAAM;AAAA,cACF;AAAA,gBACI,IAAI,CAAC,IAAI,GAAG,GAAG,SAAS;AAAA,gBACxB,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,SAAS;AAAA,gBAC5B,IAAI,CAAC,IAAI,GAAG,SAAS;AAAA,cACzB;AAAA,YACJ;AAAA,UACJ,CAAC,EAAE,MAAM,CAAC,UAAU;AAChB,iBAAK,IAAI,KAAK,KAAK;AAAA,UACvB,CAAC;AAED,cAAI,KAAK,OAAO,yBAAyB,CAAC,KAAK,+BAA+B;AAC1E,iBAAK,IAAI,MAAM,uDAAuD,KAAK,OAAO,uCAAuC;AAEzH,iBAAK,gCAAgC,KAAK,YAAY,MAAM;AACxD,kBAAI,KAAK,cAAc;AACnB,qBAAK,kBAAkB,UAAU,KAAK,EACjC,KAAK,OAAO,aAAa;AACtB,sBAAI,SAAS,WAAW,KAAK;AACzB,0BAAM,YAAY,SAAS;AAC3B,0BAAM,QAAQ;AACd,0BAAM,SAAS;AACf,0BAAM,SAAS,QAAQ;AACvB,0BAAM,SAAS,SAAS;AAExB,wBAAI,MAAM,kDAAkD,kBAAkB;AAE9E,6BAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,+BAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,8BAAM,YAAQ,wCAAkB,UAAU,IAAI,KAAK,EAAE;AACrD,+BAAO;AAAA,uBAA0B;AACjC,+BAAO,MAAM,IAAI,cAAc,IAAI,kBAAkB,mBAAmB;AAAA,sBAC5E;AAAA,oBACJ;AAEA,2BAAO;AAEP,0BAAM,KAAK,cAAc,mBAAmB,EAAE,KAAK,KAAK,KAAK,KAAK,CAAC;AAAA,kBACvE;AAAA,gBACJ,CAAC,EACA,MAAM,CAAC,UAAU;AACd,uBAAK,IAAI,MAAM,4BAA4B,KAAK,UAAU,KAAK,GAAG;AAAA,gBACtE,CAAC;AAAA,cACT;AAAA,YACJ,GAAG,KAAK,OAAO,gCAAgC,GAAI;AAAA,UACvD,OAAO;AACH,kBAAM,KAAK,cAAc,mBAAmB,EAAE,KAAK,sEAAsE,KAAK,MAAM,GAAG,oBAAoB,GAAG,EAAK,CAAC;AAAA,UACxK;AAAA,QACJ,SAAS,OAAP;AACE,eAAK,IAAI,MAAM,qEAAqE,OAAO;AAAA,QAC/F;AAAA,MACJ,OAAO;AACH,YAAI,KAAK,+BAA+B;AACpC,eAAK,cAAc,KAAK,6BAA6B;AACrD,eAAK,gCAAgC;AAAA,QACzC;AAGA,cAAM,KAAK,8BAA8B,OAAO,KAAK,KAAK,uBAAuB,CAAC;AAElF,aAAK,IAAI,MAAM,gBAAgB;AAAA,MACnC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,eAAqB;AACzB,SAAK,IAAI,MAAM,yBAAyB;AAExC,SAAK,kBAAkB,SAAS,KAAK,EAChC,KAAK,OAAO,aAAa;AACtB,UAAI,SAAS,WAAW,KAAK;AACzB,cAAM,UAAU,SAAS;AAEzB,aAAK,gBAAgB,IAAI;AAEzB,YAAI,KAAK,eAAe,QAAQ,SAAS,KAAK,gBAAgB,KAAK,CAAC,KAAK,yBAAyB;AAC9F,eAAK,IAAI,KAAK,8EAA8E,KAAK,wDAAwD,QAAQ,SAAS;AAC1K,eAAK,0BAA0B;AAAA,QACnC;AAEA,cAAM,KAAK,qBAAqB,gBAAgB,EAAE,KAAK,QAAQ,SAAS,KAAK,KAAK,CAAC;AAEnF,cAAM,KAAK,qBAAqB,cAAc,EAAE,KAAK,SAAS,QAAQ,GAAG,GAAG,KAAK,KAAK,CAAC;AACvF,cAAM,KAAK,qBAAqB,eAAe,EAAE,KAAK,SAAS,QAAQ,IAAI,GAAG,KAAK,KAAK,CAAC;AACzF,cAAM,KAAK,qBAAqB,mBAAmB,EAAE,KAAK,SAAS,QAAQ,GAAG,GAAG,KAAK,KAAK,CAAC;AAE5F,cAAM,KAAK,qBAAqB,sBAAsB,EAAE,KAAK,QAAQ,KAAK,KAAK,KAAK,CAAC;AAErF,cAAM,KAAK,qBAAqB,kBAAkB,EAAE,KAAK,QAAQ,KAAK,KAAK,KAAK,CAAC;AACjF,cAAM,KAAK,qBAAqB,qBAAqB,EAAE,KAAK,QAAQ,aAAa,KAAK,KAAK,CAAC;AAC5F,cAAM,KAAK,qBAAqB,kBAAkB,EAAE,KAAK,QAAQ,KAAK,KAAK,KAAK,CAAC;AACjF,cAAM,KAAK,qBAAqB,iBAAiB,EAAE,KAAK,SAAS,QAAQ,MAAM,GAAG,KAAK,KAAK,CAAC;AAAA,MACjG;AAAA,IACJ,CAAC,EACA,MAAM,CAAC,UAAU;AACd,WAAK,IAAI,MAAM,gDAAgD,KAAK,UAAU,KAAK,GAAG;AACtF,WAAK,gBAAgB,KAAK;AAAA,IAC9B,CAAC;AAEL,SAAK,IAAI,MAAM,mCAAmC;AAClD,SAAK,sBACD,KAAK,uBACL,KAAK,WAAW,MAAM;AAClB,WAAK,sBAAsB;AAC3B,WAAK,aAAa;AAAA,IACtB,GAAG,GAAK;AAAA,EAChB;AAAA,EAEA,MAAc,kBAAmC;AAC7C,WAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC5C,WAAK,kBAAkB,YAAY,KAAK,EACnC,KAAK,OAAO,aAAa;AA3kB1C;AA4kBoB,YAAI,SAAS,WAAW,KAAK;AACzB,gBAAM,UAAU,SAAS;AAEzB,gBAAM,iBAAiB,MAAM,KAAK,mBAAmB,UAAU,SAAS;AAAA,YACpE,UAAU,GAAG,KAAK;AAAA,YAClB,QAAQ,GAAG,KAAK;AAAA,UACpB,CAAC;AAGD,gBAAM,gBAAiE,CAAC;AACxE,qBAAW,eAAe,eAAe,MAAM;AAC3C,iBAAI,uBAAY,UAAZ,mBAAmB,WAAnB,mBAA2B,aAAa;AACxC,4BAAc,KAAK,iBAAgB,uBAAY,UAAZ,mBAAmB,WAAnB,mBAA2B,WAAW,KAAK;AAAA,gBAC1E,IAAI,YAAY;AAAA,gBAChB,MAAM,YAAY,MAAM,OAAO;AAAA,cACnC;AAAA,YACJ;AAAA,UACJ;AAEA,qBAAW,CAAC,aAAa,GAAG,KAAK,OAAO,QAAQ,OAAO,GAAG;AACtD,gBAAI,OAAO,UAAU,eAAe,KAAK,eAAe,WAAW,GAAG;AAClE,kBAAI,cAAc,aAAa,SAAS,mBAAmB;AACvD,sBAAM,aAAS,qCAAe,GAAa;AAC3C,qBAAK,IAAI,MAAM,8CAA8C,cAAc,aAAa,UAAU,0BAA0B,MAAM;AAElI,sBAAM,KAAK,qBAAqB,cAAc,aAAa,IAAI,EAAE,KAAK,QAAQ,KAAK,MAAM,GAAG,2CAA2C,CAAC;AAAA,cAC5I,OAAO;AACH,qBAAK,IAAI,MAAM,8CAA8C,cAAc,aAAa,UAAU,KAAK;AAEvG,sBAAM,KAAK,qBAAqB,cAAc,aAAa,IAAI,EAAE,KAA6B,KAAK,MAAM,GAAG,mBAAmB,CAAC;AAAA,cACpI;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAEA,gBAAQ,SAAS,MAAM;AAAA,MAC3B,CAAC,EACA,MAAM,CAAC,UAAU;AACd,aAAK,IAAI,KAAK,8BAA8B,KAAK,UAAU,KAAK,GAAG;AAEnE,eAAO,KAAK;AAAA,MAChB,CAAC;AAAA,IACT,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,2BAA6C;AACvD,WAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC7C,WAAK,kBAAkB,SAAS,EAC3B,KAAK,CAAC,aAAa;AAChB,YAAI,SAAS,WAAW,KAAK;AACzB,eAAK,IAAI,MAAM,gDAAgD,KAAK,UAAU,SAAS,IAAI,IAAI;AAE/F,eAAK,oBAAoB,SAAS;AAElC,kBAAQ,IAAI;AAAA,QAChB,OAAO;AACH,iBAAO,GAAG,SAAS,WAAW,SAAS,MAAM;AAAA,QACjD;AAAA,MACJ,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,qBAAoC;AAC9C,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,WAAK,kBAAkB,aAAa,EAC/B,KAAK,CAAC,aAAa;AAChB,YAAI,SAAS,WAAW,KAAK;AACzB,eAAK,IAAI,MAAM,8CAA8C,KAAK,UAAU,SAAS,IAAI,IAAI;AAE7F,gBAAM,SAAoC,CAAC;AAC3C,mBAAS,IAAI,GAAG,IAAI,SAAS,KAAK,QAAQ,KAAK;AAC3C,mBAAO,KAAK,SAAS,KAAK;AAAA,UAC9B;AAEA,eAAK,kBAAkB,gCAAgC;AAAA,YACnD,QAAQ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,CAAC,EAAE,KAAK,MAAM;AACV,oBAAQ;AAAA,UACZ,CAAC;AAAA,QACL,OAAO;AACH,iBAAO,GAAG,SAAS,WAAW,SAAS,MAAM;AAAA,QACjD;AAAA,MACJ,CAAC,EACA,MAAM,MAAM;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,UAAU,MAAgC;AACpD,WAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC7C,UAAI,KAAK,cAAc;AACnB,aAAK,qBAAqB,IAAI,EACzB,KAAK,CAAC,aAAa;AAChB,cAAI,SAAS,WAAW,OAAO,SAAS,SAAS,MAAM;AACnD,iBAAK,IAAI,MAAM,sCAAsC,OAAO;AAC5D,oBAAQ,IAAI;AAAA,UAChB,OAAO;AACH,mBAAO,GAAG,SAAS,WAAW,SAAS,MAAM;AAAA,UACjD;AAAA,QACJ,CAAC,EACA,MAAM,MAAM;AAAA,MACrB,OAAO;AACH,eAAO,mBAAmB;AAAA,MAC9B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,cAA6B;AACvC,UAAM,KAAK,eAAe;AAC1B,UAAM,KAAK,gBAAgB;AAC3B,UAAM,KAAK,eAAe;AAAA,EAC9B;AAAA,EAEA,MAAc,iBAAgC;AA/rBlD;AAgsBQ,QAAI,KAAK,cAAc;AACnB,iBAAW,aAAa,KAAK,OAAO,YAAY;AAC5C,YAAI,UAAU,MAAM;AAChB,gBAAM,OAAO,OAAO,UAAU,IAAI,EAAE,KAAK;AACzC,gBAAM,kBAAkB,MAAM,KAAK,cAAc,QAAQ,UAAU,cAAc;AACjF,gBAAM,aAAa,kBAAkB,gBAAgB,MAAM;AAG3D,cAAI,mBAAmB,EAAC,mDAAiB,MAAK;AAC1C,kBAAM,KAAK,cAAc,QAAQ,UAAU,gBAAgB,EAAE,KAAK,YAAY,KAAK,MAAM,GAAG,iBAAiB,CAAC;AAAA,UAClH;AAEA,cAAI,CAAC,YAAY;AACb,iBAAK,IAAI,MAAM,gDAAgD,UAAU,oCAAoC,UAAU,eAAe;AAEtI,kBAAM,KAAK,UAAU,UAAU,IAAI,EAAE,MAAM,CAAC,UAAU;AAClD,mBAAK,IAAI,KAAK,mCAAmC,UAAU,4BAA4B,OAAO;AAAA,YAClG,CAAC;AAAA,UACL,WAAW,UAAU,SAAS,KAAK,SAAS,IAAI,GAAG;AAC/C,gBAAI;AACA,oBAAM,QAAQ,UAAU;AACxB,kBAAI,CAAC,OAAO,UAAU,eAAe,KAAK,KAAK,yBAAyB,KAAK,GAAG;AAC5E,sBAAM,MAAM,MAAM,KAAK,sBAAsB,KAAK;AAClD,oBAAI,OAAO,IAAI,SAAS,SAAS;AAC7B,wBAAM,QAAQ,MAAM,KAAK,qBAAqB,KAAK;AAEnD,uBAAK,wBAAwB,SAAS;AAAA,oBAClC,KAAK,SAAS,MAAM,MAAM,MAAM,MAAM;AAAA,oBACtC,MAAM,2BAAK,OAAO;AAAA,oBAClB,OAAM,gCAAK,WAAL,mBAAa;AAAA,oBACnB,IAAI,QAAQ,MAAM,KAAK,KAAK,IAAI;AAAA,kBACpC;AAEA,wBAAM,iBAAiB,CAAC,UAAU,UAAU,OAAO;AACnD,uBAAI,2BAAK,OAAO,SAAQ,CAAC,eAAe,SAAS,IAAI,OAAO,IAAI,GAAG;AAC/D,yBAAK,IAAI;AAAA,sBACL,mCAAmC,UAAU,qBAAqB,4BAA4B,IAAI,OAAO,mBAAmB,eAAe,KAAK,IAAI;AAAA,oBACxJ;AAAA,kBACJ;AAEA,sBAAI,KAAK,SAAS,IAAI,KAAK,GAAC,gCAAK,WAAL,mBAAa,OAAM;AAC3C,yBAAK,IAAI;AAAA,sBACL,0CAA0C,UAAU,UAAU;AAAA,oBAClE;AAAA,kBACJ;AAEA,sBAAI,SAAS,CAAC,MAAM,KAAK;AACrB,yBAAK,IAAI,KAAK,+CAA+C,UAAU,UAAU,iEAAiE;AAAA,kBACtJ;AAEA,wBAAM,KAAK,4BAA4B,KAAK;AAC5C,wBAAM,KAAK,6BAA6B,KAAK;AAE7C,uBAAK,IAAI,MAAM,sCAAsC,UAAU,qBAAqB,gCAAgC;AAAA,gBACxH,OAAO;AACH,uBAAK,IAAI,KAAK,gCAAgC,UAAU,4CAA4C,wBAAwB,2BAAK,MAAM;AAAA,gBAC3I;AAAA,cACJ,OAAO;AACH,qBAAK,IAAI,MAAM,sCAAsC,UAAU,qBAAqB,wCAAwC;AAAA,cAChI;AAAA,YACJ,SAAS,OAAP;AACE,mBAAK,IAAI,MAAM,qEAAqE,UAAU,UAAU,OAAO;AAAA,YACnH;AAAA,UACJ,WAAW,KAAK,SAAS,GAAG;AAExB,iBAAK,IAAI,MAAM,yCAAyC,UAAU,oBAAoB,UAAU,0BAA0B,UAAU,OAAO;AAE3I,gBAAI,UAAU,OAAO;AACjB,mBAAK,IAAI;AAAA,gBACL,gCAAgC,UAAU,iCAAiC,UAAU;AAAA,cACzF;AAAA,YACJ;AAEA,kBAAM,cAAc,KAAK,QAAQ,MAAM,EAAE,EAAE,KAAK;AAEhD,gBAAI,YAAY,SAAS,GAAG;AACxB,oBAAM,KAAK,qBAAqB,UAAU,MAAM,KAAK,oBAAoB,WAAW,WAAW,CAAC,EAAE,MAAM,CAAC,UAAU;AAC/G,qBAAK,IAAI,KAAK,gBAAgB,UAAU,sCAAsC,UAAU,2BAA2B,OAAO;AAAA,cAC9H,CAAC;AAAA,YACL,OAAO;AAEH,mBAAK,IAAI,MAAM,gDAAgD,UAAU,qCAAqC;AAE9G,oBAAM,KAAK,UAAU,UAAU,IAAI,EAAE,MAAM,CAAC,UAAU;AAClD,qBAAK,IAAI,KAAK,mCAAmC,UAAU,wCAAwC,OAAO;AAAA,cAC9G,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,eAAK,IAAI,KAAK,gGAAgG;AAAA,QAClH;AAAA,MACJ;AAGA,iBAAW,SAAS,OAAO,KAAK,KAAK,uBAAuB,GAAG;AAC3D,cAAM,KAAK,kBAAkB,KAAK;AAAA,MACtC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,kBAAkB,OAA8B;AApyBlE;AAqyBQ,QAAI,KAAK,gBAAgB,OAAO,UAAU,eAAe,KAAK,KAAK,yBAAyB,KAAK,GAAG;AAChG,WAAK,IAAI,MAAM,yDAAyD,oBAAoB,KAAK,UAAU,KAAK,wBAAwB,MAAM,GAAG;AAEjJ,iBAAW,aAAa,KAAK,OAAO,YAAY;AAC5C,YAAI,UAAU,MAAM;AAChB,gBAAM,OAAO,OAAO,UAAU,IAAI,EAAE,KAAK;AAEzC,cAAI,UAAU,SAAS,UAAU,UAAU,SAAS,KAAK,SAAS,IAAI,GAAG;AACrE,iBAAK,IAAI,MAAM,8CAA8C,UAAU,oBAAoB,UAAU,mBAAmB,UAAU,OAAO;AAEzI,gBAAI;AACA,oBAAM,kBAAkB,MAAM,KAAK,cAAc,QAAQ,UAAU,cAAc;AACjF,oBAAM,aAAa,kBAAkB,gBAAgB,MAAM;AAE3D,kBAAI,YAAY;AACZ,sBAAM,MAAM,KAAK,wBAAwB,OAAO;AAEhD,oBAAI,OAAO,QAAQ,aAAa;AAC5B,sBAAI,SAAS;AAEb,sBAAI,KAAK,wBAAwB,OAAO,SAAS,UAAU;AACvD,0BAAM,SAAS,OAAO,QAAQ,WAAW,WAAW,GAAa,IAAI;AACrE,0BAAM,WAAW,OAAO,UAAU,aAAa,WAAW,SAAS,UAAU,QAAQ,KAAI,eAAU,aAAV,YAAsB;AAE/G,wBAAI,CAAC,MAAM,MAAM,KAAK,SAAS,MAAM,GAAG;AACpC,0BAAI,gBAAgB,OAAO,GAAG,EAAE,MAAM,GAAG,EAAE,GAAG,UAAU;AAExD,0BAAI,gBAAgB,UAAU;AAC1B,wCAAgB;AAAA,sBACpB;AAEA,4BAAM,YAAY,KAAK,OAAO;AAC9B,0BAAI,cAAc,UAAU;AACxB,iCAAS,KAAK,YAAY,QAAQ,aAAa;AAAA,sBACnD,WAAW,CAAC,MAAM,IAAI,EAAE,SAAS,SAAS,GAAG;AACzC,iCAAS,KAAK,YAAY,QAAQ,eAAe,SAAS;AAAA,sBAC9D,WAAW,cAAc,KAAK;AAC1B,iCAAS,OAAO,QAAQ,aAAa;AAAA,sBACzC,WAAW,cAAc,KAAK;AAC1B,iCAAS,OAAO,QAAQ,aAAa,EAAE,QAAQ,KAAK,GAAG;AAAA,sBAC3D;AAEA,2BAAK,IAAI,MAAM,iDAAiD,eAAe,aAAa,WAAW,iCAAiC,YAAY;AAAA,oBACxJ;AAAA,kBACJ;AAEA,wBAAM,cAAc,KACf,QAAQ,MAAM,MAAgB,EAC9B,QAAQ,OAAM,UAAK,wBAAwB,OAAO,SAApC,YAA4C,EAAE,EAC5D,KAAK;AAEV,sBAAI,YAAY,SAAS,GAAG;AACxB,0BAAM,KAAK,qBAAqB,UAAU,MAAM,KAAK,oBAAoB,WAAW,aAAa,GAAG,CAAC,EAAE,MAAM,CAAC,UAAU;AACpH,2BAAK,IAAI,KAAK,gBAAgB,UAAU,sCAAsC,UAAU,UAAU,OAAO;AAAA,oBAC7G,CAAC;AAAA,kBACL,OAAO;AAEH,yBAAK,IAAI,MAAM,mDAAmD,UAAU,oBAAoB;AAEhG,0BAAM,KAAK,UAAU,UAAU,IAAI,EAAE,MAAM,CAAC,UAAU;AAClD,2BAAK,IAAI,KAAK,mCAAmC,UAAU,uBAAuB,OAAO;AAAA,oBAC7F,CAAC;AAAA,kBACL;AAAA,gBACJ,OAAO;AAEH,uBAAK,IAAI,MAAM,mDAAmD,UAAU,uBAAuB;AAEnG,wBAAM,KAAK,UAAU,UAAU,IAAI,EAAE,MAAM,CAAC,UAAU;AAClD,yBAAK,IAAI,KAAK,mCAAmC,UAAU,0BAA0B,OAAO;AAAA,kBAChG,CAAC;AAAA,gBACL;AAAA,cACJ;AAAA,YACJ,SAAS,OAAP;AACE,mBAAK,IAAI,MAAM,qDAAqD,UAAU,UAAU,OAAO;AAAA,YACnG;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,oBAAoB,WAAsB,MAAc,KAAuC;AACnG,UAAM,cAA0B,CAAC;AAGjC,QAAI,UAAU,qBAAqB;AAC/B,kBAAY,SAAS,UAAU;AAAA,IACnC,WAAW,UAAU,iBAAiB;AAClC,kBAAY,aAAa,UAAU;AAAA,IACvC;AAGA,QAAI,UAAU,SAAS;AACnB,kBAAY,UAAU;AAAA,IAC1B,WAAW,UAAU,WAAW;AAC5B,kBAAY,QAAQ,UAAU;AAAA,IAClC;AAGA,QAAI,UAAU,UAAU;AACpB,kBAAY,WAAW;AAAA,IAC3B,OAAO;AAEH,UAAI,UAAU,cAAc,GAAG;AAC3B,oBAAY,cAAc,UAAU;AAAA,MACxC;AAGA,UAAI,UAAU,SAAS,GAAG;AACtB,oBAAY,SAAS,UAAU;AAAA,MACnC;AAAA,IACJ;AAGA,QAAI,UAAU,MAAM;AAChB,kBAAY,OAAO,UAAU;AAAA,IACjC;AAGA,QAAI,UAAU,WAAW,GAAG;AACxB,kBAAY,WAAW,UAAU;AAAA,IACrC;AAGA,QAAI,OAAO,QAAQ,UAAU;AACzB,UAAI,UAAU,qBAAqB,MAAM,UAAU,kBAAkB;AACjE,aAAK,IAAI,MAAM,0CAA0C,UAAU,sBAAsB,kBAAkB,UAAU,sCAAsC;AAE3J,YAAI,UAAU,iBAAiB;AAC3B,sBAAY,OAAO,UAAU;AAAA,QACjC;AACA,YAAI,UAAU,sBAAsB;AAChC,sBAAY,QAAQ,UAAU;AAC9B,sBAAY,UAAU;AAAA,QAC1B;AACA,YAAI,UAAU,4BAA4B;AACtC,sBAAY,aAAa,UAAU;AAEnC,cAAI,UAAU,qBAAqB;AAC/B,mBAAO,YAAY;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ,WAAW,UAAU,qBAAqB,MAAM,UAAU,kBAAkB;AACxE,aAAK,IAAI,MAAM,0CAA0C,UAAU,sBAAsB,qBAAqB,UAAU,sCAAsC;AAE9J,YAAI,UAAU,iBAAiB;AAC3B,sBAAY,OAAO,UAAU;AAAA,QACjC;AACA,YAAI,UAAU,sBAAsB;AAChC,sBAAY,QAAQ,UAAU;AAC9B,sBAAY,UAAU;AAAA,QAC1B;AACA,YAAI,UAAU,4BAA4B;AACtC,sBAAY,aAAa,UAAU;AAEnC,cAAI,UAAU,qBAAqB;AAC/B,mBAAO,YAAY;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,MACH;AAAA,MACA,UAAU;AAAA,MACV,KAAK,UAAU;AAAA,MACf,GAAG;AAAA,IACP;AAAA,EACJ;AAAA,EAEA,MAAc,kBAAiC;AA/8BnD;AAg9BQ,QAAI,KAAK,gBAAgB,KAAK,OAAO,YAAY,SAAS,GAAG;AACzD,YAAM,uBAAsC,CAAC;AAG7C,iBAAW,cAAc,KAAK,OAAO,aAAa;AAC9C,YAAI,WAAW,kBAAkB,CAAC,qBAAqB,SAAS,WAAW,cAAc,GAAG;AACxF,gBAAM,oBAAoB,MAAM,KAAK,sBAAsB,kBAAkB,WAAW,gBAAgB;AAExG,cAAI,uBAAqB,uBAAkB,WAAlB,mBAA0B,aAAY;AAC3D,kBAAM,2BAA2B,MAAM,KAAK,qBAAqB,kBAAkB,WAAW,sBAAsB;AAEpH,gBAAI,4BAA4B,yBAAyB,KAAK;AAC1D,mBAAK,IAAI,MAAM,mEAAmE,WAAW,gBAAgB;AAE7G,mCAAqB,KAAK,WAAW,cAAc;AAAA,YACvD,OAAO;AACH,mBAAK,IAAI,KAAK,oDAAoD,WAAW,iDAAiD;AAAA,YAClI;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI,KAAK,oDAAoD,WAAW,mDAAmD;AAAA,UACpI;AAAA,QACJ;AAAA,MACJ;AAEA,iBAAW,cAAc,KAAK,OAAO,aAAa;AAC9C,YAAI,WAAW,MAAM;AACjB,cAAI,WAAW,SAAS,WAAW,gBAAgB;AAC/C,iBAAK,IAAI,MAAM,mDAAmD,WAAW,aAAa,WAAW,eAAe,WAAW,gBAAgB;AAE/I,gBAAI;AACA,oBAAM,kBAAkB,MAAM,KAAK,cAAc,QAAQ,WAAW,cAAc;AAClF,oBAAM,aAAa,kBAAkB,gBAAgB,MAAM;AAG3D,kBAAI,mBAAmB,EAAC,mDAAiB,MAAK;AAC1C,sBAAM,KAAK,cAAc,QAAQ,WAAW,gBAAgB,EAAE,KAAK,YAAY,KAAK,MAAM,GAAG,kBAAkB,CAAC;AAAA,cACpH;AAEA,kBAAI,CAAC,YAAY;AACb,qBAAK,IAAI,MAAM,kDAAkD,WAAW,oCAAoC,WAAW,eAAe;AAE1I,sBAAM,KAAK,UAAU,WAAW,IAAI,EAAE,MAAM,CAAC,UAAU;AACnD,uBAAK,IAAI,KAAK,iCAAiC,WAAW,4BAA4B,OAAO;AAAA,gBACjG,CAAC;AAAA,cACL,WAAW,qBAAqB,SAAS,WAAW,cAAc,GAAG;AACjE,sBAAM,YAAY,MAAM,KAAK,sBAAsB,WAAW,KAAK;AAEnE,oBAAI,aAAa,OAAO,UAAU,eAAe,MAAK,kDAAW,WAAX,mBAAmB,WAAnB,YAA6B,CAAC,GAAG,WAAW,cAAc,GAAG;AAC/G,wBAAM,YAAY,WAAW,OAAO,KAAK;AAEzC,wBAAM,cAAc,MAAM,KAAK,YAAY,WAAW,gBAAgB,cAAc;AAAA,oBAChF,IAAI,WAAW;AAAA,oBACf,SAAS;AAAA,sBACL,OAAO;AAAA,sBACP,KAAK,KAAK,IAAI;AAAA,sBACd,WAAW;AAAA,sBACX,OAAO;AAAA,sBACP,qBAAqB;AAAA,sBACrB,YAAY;AAAA,sBACZ,oBAAoB;AAAA,sBACpB,KAAK;AAAA,oBACT;AAAA,kBACJ,CAAC;AACD,wBAAM,WAAY,2CAAqB,OAClC,OAAO,CAAC,UAA0B,OAAO,MAAM,QAAQ,YAAY,MAAM,KACzE,IAAI,CAAC,UAA0B,KAAK,MAAM,MAAM,GAAa,GAC7D,MAAM,YAAY;AAEvB,uBAAK,IAAI;AAAA,oBACL,2CAA2C,WAAW,aAAa,WAAW,UAAU,KAAK,UAAU,WAAW,iBAAiB,KAAK,UAAU,QAAQ;AAAA,kBAC9J;AAEA,sBAAI,SAAS,SAAS,GAAG;AACrB,0BAAM,cAA0B,CAAC;AAGjC,wBAAI,WAAW,WAAW,GAAG;AACzB,kCAAY,WAAW,WAAW;AAAA,oBACtC;AAGA,wBAAI,WAAW,SAAS,GAAG;AACvB,kCAAY,SAAS,WAAW;AAAA,oBACpC;AAEA,0BAAM,KAAK,qBAAqB,WAAW,MAAM;AAAA,sBAC7C,OAAO,WAAW,aAAa;AAAA,sBAC/B,YAAY,WAAW,mBAAmB;AAAA,sBAC1C,MAAM;AAAA,sBACN,WAAW;AAAA,sBACX,MAAM,WAAW;AAAA,sBACjB,UAAU,KAAK,OAAO,6BAA6B;AAAA,sBACnD,KAAK,WAAW;AAAA,sBAChB,GAAG;AAAA,oBACP,CAAC,EAAE,MAAM,CAAC,UAAU;AAChB,2BAAK,IAAI,KAAK,gBAAgB,WAAW,uCAAuC,WAAW,UAAU,OAAO;AAAA,oBAChH,CAAC;AAAA,kBACL,OAAO;AACH,yBAAK,IAAI,MAAM,kDAAkD,WAAW,yBAAyB;AAErG,0BAAM,KAAK,UAAU,WAAW,IAAI,EAAE,MAAM,CAAC,UAAU;AACnD,2BAAK,IAAI,KAAK,iCAAiC,WAAW,4BAA4B,OAAO;AAAA,oBACjG,CAAC;AAAA,kBACL;AAAA,gBACJ,OAAO;AACH,uBAAK,IAAI,KAAK,yDAAyD,WAAW,aAAa,WAAW,mDAAmD;AAAA,gBACjK;AAAA,cACJ,OAAO;AACH,qBAAK,IAAI,KAAK,yDAAyD,WAAW,aAAa,WAAW,uCAAuC;AAAA,cACrJ;AAAA,YACJ,SAAS,OAAP;AACE,mBAAK,IAAI,MAAM,yDAAyD,WAAW,aAAa,WAAW,WAAW,OAAO;AAAA,YACjI;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,eAAK,IAAI,KAAK,kGAAkG;AAAA,QACpH;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,KAAK,OAAO,YAAY,SAAS,GAAG;AACpC,WAAK,IAAI,MAAM,sCAAqC,UAAK,OAAO,+BAAZ,YAA0C,cAAc;AAC5G,WAAK,4BACD,KAAK,6BACL,KAAK;AAAA,QACD,MAAM;AACF,eAAK,4BAA4B;AACjC,eAAK,gBAAgB;AAAA,QACzB;AAAA,QACA,KAAK,OAAO,6BAA6B,OAAQ,MAAM;AAAA,MAC3D;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,MAAc,iBAAgC;AAAA,EAAC;AAAA,EAE/C,MAAc,mBAAoC;AAC9C,WAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC5C,UAAI,KAAK,cAAc;AACnB,aAAK,kBAAkB,QAAQ,KAAK,EAC/B,KAAK,OAAO,aAAa;AACtB,cAAI,SAAS,WAAW,KAAK;AACzB,kBAAM,UAAU,SAAS;AAEzB,kBAAM,UAAU;AAChB,kBAAM,aAAa,KAAK,OAAO,WAAW,IAAI,CAAC,MAAM,EAAE,IAAI;AAC3D,kBAAM,cAAc,KAAK,OAAO,YAAY,IAAI,CAAC,MAAM,EAAE,IAAI;AAC7D,kBAAM,aAAa,KAAK,OAAO,WAAW,IAAI,CAAC,MAAM,EAAE,IAAI;AAC3D,kBAAM,eAAe,QAAQ,IAAI,CAAC,MAAM,EAAE,IAAI;AAC9C,kBAAM,UAAU,CAAC,GAAG,aAAa,GAAG,YAAY,GAAG,aAAa,GAAG,UAAU;AAE7E,iBAAK,IAAI,MAAM,qDAAqD,KAAK,UAAU,YAAY,GAAG;AAElG,kBAAM,UAAU,CAAC;AACjB,kBAAM,WAAW,CAAC;AAGlB,kBAAM,mBAAmB,MAAM,KAAK,mBAAmB,OAAO;AAC9D,gBAAI,kBAAkB;AAClB,yBAAW,mBAAmB,kBAAkB;AAC5C,sBAAM,KAAK,KAAK,gBAAgB,gBAAgB,GAAG;AAGnD,oBAAI,GAAG,MAAM,GAAG,EAAE,WAAW,GAAG;AAC5B,0BAAQ,KAAK,EAAE;AAAA,gBACnB;AAAA,cACJ;AAAA,YACJ;AAGA,uBAAW,QAAQ,SAAS;AACxB,uBAAS,KAAK,GAAG,WAAW,MAAM;AAClC,mBAAK,IAAI,MAAM,oCAAoC,WAAW,MAAM;AAEpE,oBAAM,cAAc,WAAW,SAAS,IAAI;AAC5C,oBAAM,eAAe,YAAY,SAAS,IAAI;AAC9C,oBAAM,cAAc,WAAW,SAAS,IAAI;AAE5C,oBAAM,KAAK,kBAAkB,GAAG,WAAW,QAAQ;AAAA,gBAC/C,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACJ,MAAM;AAAA,kBACN,MAAM,GAAG,OAAO,cAAc,kBAAkB,KAAK,eAAe,mBAAmB,KAAK,cAAc,kBAAkB;AAAA,gBAChI;AAAA,gBACA,QAAQ;AAAA,kBACJ,aAAa,YAAY,SAAS,IAAI;AAAA,kBACtC;AAAA,kBACA;AAAA,kBACA;AAAA,gBACJ;AAAA,cACJ,CAAC;AAED,oBAAM,KAAK,wBAAwB,GAAG,WAAW,iBAAiB;AAAA,gBAC9D,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACJ,MAAM;AAAA,oBACF,IAAI;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,oBAEJ,SAAS;AAAA,kBACb;AAAA,kBACA,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,gBACX;AAAA,gBACA,QAAQ;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,CAAC;AAGD,kBAAI,eAAe,gBAAgB,aAAa;AAC5C,sBAAM,KAAK,wBAAwB,GAAG,WAAW,gBAAgB;AAAA,kBAC7D,MAAM;AAAA,kBACN,QAAQ;AAAA,oBACJ,MAAM;AAAA,sBACF,IAAI;AAAA,sBACJ,IAAI;AAAA,sBACJ,IAAI;AAAA,sBACJ,IAAI;AAAA,sBACJ,IAAI;AAAA,sBACJ,IAAI;AAAA,sBACJ,IAAI;AAAA,sBACJ,IAAI;AAAA,sBACJ,IAAI;AAAA,sBAEJ,SAAS;AAAA,oBACb;AAAA,oBACA,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,OAAO;AAAA,oBACP,KAAK;AAAA,kBACT;AAAA,kBACA,QAAQ;AAAA,oBACJ;AAAA,kBACJ;AAAA,gBACJ,CAAC;AAED,oBAAI,aAAa;AACb,wBAAM,KAAK,wBAAwB,GAAG,WAAW,aAAa;AAAA,oBAC1D,MAAM;AAAA,oBACN,QAAQ;AAAA,sBACJ,MAAM;AAAA,wBACF,IAAI;AAAA,wBACJ,IAAI;AAAA,wBACJ,IAAI;AAAA,wBACJ,IAAI;AAAA,wBACJ,IAAI;AAAA,wBACJ,IAAI;AAAA,wBACJ,IAAI;AAAA,wBACJ,IAAI;AAAA,wBACJ,IAAI;AAAA,wBAEJ,SAAS;AAAA,sBACb;AAAA,sBACA,MAAM;AAAA,sBACN,MAAM;AAAA,sBACN,MAAM;AAAA,sBACN,OAAO;AAAA,oBACX;AAAA,oBACA,QAAQ;AAAA,sBACJ;AAAA,oBACJ;AAAA,kBACJ,CAAC;AAAA,gBACL;AAAA,cACJ;AAAA,YACJ;AAGA,uBAAW,OAAO,SAAS;AACvB,kBAAI,CAAC,SAAS,SAAS,GAAG,GAAG;AACzB,sBAAM,KAAK,eAAe,KAAK,EAAE,WAAW,KAAK,CAAC;AAClD,qBAAK,IAAI,MAAM,+BAA+B,KAAK;AAAA,cACvD;AAAA,YACJ;AAEA,gBAAI,KAAK,OAAO,uBAAuB;AAEnC,yBAAW,QAAQ,aAAa,OAAO,CAAC,MAAM,CAAC,QAAQ,SAAS,CAAC,CAAC,GAAG;AACjE,qBAAK,IAAI,KAAK,sEAAsE,OAAO;AAE3F,oBAAI;AACA,wBAAM,KAAK,UAAU,IAAI,EAAE,MAAM,CAAC,UAAU;AACxC,yBAAK,IAAI,KAAK,iCAAiC,UAAU,OAAO;AAAA,kBACpE,CAAC;AAAA,gBACL,SAAS,OAAP;AACE,uBAAK,IAAI,MAAM,mDAAmD,SAAS,OAAO;AAAA,gBACtF;AAAA,cACJ;AAAA,YACJ;AAEA,oBAAQ,SAAS,MAAM;AAAA,UAC3B,OAAO;AACH,iBAAK,IAAI,KAAK,4CAA4C,SAAS,QAAQ;AAE3E,mBAAO,yBAAyB,SAAS,QAAQ;AAAA,UACrD;AAAA,QACJ,CAAC,EACA,MAAM,CAAC,UAAU;AACd,eAAK,IAAI,MAAM,sCAAsC,KAAK,UAAU,KAAK,GAAG;AAE5E,iBAAO,KAAK;AAAA,QAChB,CAAC;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,wBAAwB,OAAuC;AACzE,SAAK,IAAI,MAAM,iCAAiC,OAAO;AAEvD,UAAM,kBAAkB,MAAM,KAAK,eAAe,aAAa,SAAS;AACxE,UAAM,kBAA0D,OAAO,QAAQ,eAAe,EAAE;AAAA,MAC5F,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO;AAAA,QACtB,GAAG;AAAA,QACH,CAAC,KAAK,gBAAgB,KAAK,IAAI,MAAM;AAAA,MACzC;AAAA,MACA,CAAC;AAAA,IACL;AAEA,UAAM,UAA4B;AAAA,MAC9B,OAAO,gBAAgB,aAAa;AAAA,IACxC;AAEA,QAAI,QAAQ,UAAU,KAAK;AACvB,YAAM,QAAQ,gBAAgB,aAAa;AAC3C,UAAI,QAAQ,GAAG;AACX,gBAAQ,QAAQ;AAAA,MACpB;AAAA,IACJ;AAEA,WAAO,KAAK,kBAAkB,YAAY,SAAS,QAAQ,gBAAgB,aAAa,kBAAkB,UAAU,MAAS;AAAA,EACjI;AAAA,EAEA,MAAc,0BAAkD;AAC5D,SAAK,IAAI,MAAM,oBAAoB;AAEnC,UAAM,kBAAkB,MAAM,KAAK,eAAe,qBAAqB;AACvE,UAAM,kBAA0D,OAAO,QAAQ,eAAe,EAAE;AAAA,MAC5F,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO;AAAA,QACtB,GAAG;AAAA,QACH,CAAC,KAAK,gBAAgB,KAAK,IAAI,MAAM;AAAA,MACzC;AAAA,MACA,CAAC;AAAA,IACL;AAEA,UAAM,UAA4B;AAAA,MAC9B,YAAY,gBAAgB;AAAA,MAC5B,OAAO,OAAO,gBAAgB,0BAA0B,EAAE,YAAY;AAAA,IAC1E;AAEA,WAAO,KAAK,kBAAkB,aAAa,QAAQ,gBAAgB,8BAA8B,UAAU,MAAS;AAAA,EACxH;AAAA,EAEA,MAAc,qBAAqB,MAAc,MAA2C;AACxF,WAAO,KAAK,kBAAkB,eAAe,QAAQ,QAAQ,IAAI;AAAA,EACrE;AAAA,EAEA,MAAc,kBAAkB,SAAiB,QAAiB,MAAuC;AACrG,WAAO,IAAI,QAAuB,CAAC,SAAS,WAAW;AACnD,YAAM,MAAM,QAAQ;AACpB,YAAM,UAAU,KAAK,OAAO,cAAc,OAAQ;AAElD,UAAI,KAAK,OAAO,UAAU;AACtB,YAAI,MAAM;AACN,eAAK,IAAI,MAAM,YAAY,uBAAuB,mBAAmB,KAAK,UAAU,IAAI,GAAG;AAAA,QAC/F,OAAO;AACH,eAAK,IAAI,MAAM,YAAY,uBAAuB,mBAAmB;AAAA,QACzE;AAEA,yBAAAA,SAAM;AAAA,UACF;AAAA,UACA;AAAA,UACA,SAAS,UAAU,KAAK,OAAO;AAAA,UAC/B;AAAA,UACA;AAAA,UACA,MAAM;AAAA,YACF,UAAU,KAAK,OAAO;AAAA,YACtB,UAAU,KAAK,OAAO;AAAA,UAC1B;AAAA,UACA,gBAAgB,CAAC,WAAW;AACxB,mBAAO,CAAC,KAAK,GAAG,EAAE,QAAQ,MAAM,IAAI;AAAA,UACxC;AAAA,UACA,cAAc;AAAA,QAClB,CAAC,EACI,KAAK,CAAC,aAAa;AAChB,eAAK,IAAI,MAAM,YAAY,SAAS,yBAAyB,sBAAsB,KAAK,UAAU,SAAS,IAAI,GAAG;AAGlH,eAAK,gBAAgB;AAErB,kBAAQ,QAAQ;AAAA,QACpB,CAAC,EACA,MAAM,CAAC,UAAU;AACd,cAAI,MAAM,UAAU;AAGhB,gBAAI,MAAM,SAAS,WAAW,KAAK;AAC/B,mBAAK,IAAI,KAAK,uHAAuH;AAAA,YACzI,OAAO;AACH,mBAAK,IAAI,KAAK,YAAY,MAAM,SAAS,wBAAwB,qBAAqB,KAAK,UAAU,MAAM,SAAS,IAAI,GAAG;AAAA,YAC/H;AAAA,UACJ,WAAW,MAAM,SAAS;AAMtB,gBAAI,MAAM,SAAS,KAAK,eAAe;AACnC,mBAAK,IAAI,MAAM,MAAM,OAAO;AAAA,YAChC,OAAO;AACH,mBAAK,IAAI,KAAK,SAAS,MAAM,aAAa,QAAQ,MAAM,SAAS;AACjE,mBAAK,gBAAgB,MAAM;AAAA,YAC/B;AAAA,UACJ,OAAO;AAEH,iBAAK,IAAI,MAAM,MAAM,OAAO;AAAA,UAChC;AAEA,iBAAO,KAAK;AAAA,QAChB,CAAC;AAAA,MACT,OAAO;AACH,eAAO,6BAA6B;AAAA,MACxC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,gBAAgB,IAAoB;AACxC,UAAM,KAAK,IAAI,OAAO,KAAK,YAAY,QAAQ,GAAG;AAClD,WAAO,GAAG,QAAQ,IAAI,EAAE;AAAA,EAC5B;AAAA,EAEA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,UAAI,KAAK,OAAO,kBAAkB;AAC9B,cAAM,aAAa,KAAK,OAAO,WAAW,IAAI,CAAC,MAAM,EAAE,IAAI;AAC3D,cAAM,cAAc,KAAK,OAAO,YAAY,IAAI,CAAC,MAAM,EAAE,IAAI;AAG7D,mBAAW,QAAQ,CAAC,GAAG,YAAY,GAAG,WAAW,GAAG;AAChD,eAAK,IAAI,KAAK,sDAAsD,OAAO;AAE3E,cAAI;AACA,kBAAM,KAAK,UAAU,IAAI,EAAE,MAAM,CAAC,UAAU;AACxC,mBAAK,IAAI,KAAK,iCAAiC,UAAU,OAAO;AAAA,YACpE,CAAC;AAAA,UACL,SAAS,OAAP;AACE,iBAAK,IAAI,MAAM,mCAAmC,SAAS,OAAO;AAAA,UACtE;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,KAAK,gBAAgB,KAAK;AAEhC,UAAI,KAAK,qBAAqB;AAC1B,aAAK,IAAI,MAAM,gCAAgC;AAC/C,aAAK,aAAa,KAAK,mBAAmB;AAAA,MAC9C;AAEA,UAAI,KAAK,2BAA2B;AAChC,aAAK,IAAI,MAAM,+BAA+B;AAC9C,aAAK,aAAa,KAAK,yBAAyB;AAAA,MACpD;AAEA,UAAI,KAAK,+BAA+B;AACpC,aAAK,cAAc,KAAK,6BAA6B;AACrD,aAAK,gCAAgC;AAAA,MACzC;AAEA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEQ,eAAe,QAAgB,QAAyB;AAC5D,UAAM,WAAW,OAAO,MAAM,GAAG;AACjC,UAAM,WAAW,OAAO,MAAM,GAAG;AACjC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YAAM,IAAI,CAAC,CAAC,SAAS;AACrB,YAAM,IAAI,CAAC,CAAC,SAAS;AACrB,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,IAAI;AAAG,eAAO;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,YAAY,OAAO;AACpG,OAAO;AAEH,GAAC,MAAM,IAAI,YAAY,GAAG;AAC9B;",
  "names": ["axios"]
}
